/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reportes;

import conexion.conexion_facturacion;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;


/**
 *
 * @author r
 */
public class Reporte_diario extends javax.swing.JFrame {

    /**
     * Creates new form Reporte_diario
     */
    DefaultListModel des = new DefaultListModel();
    Dimension dim;
    conexion_facturacion con;
    private MiModelo modelof = new MiModelo();
    private MiModelo modelop = new MiModelo();
    private TableRowSorter<TableModel> sorterf;
    private TableRowSorter<TableModel> sorterp;

    public class MiModelo extends DefaultTableModel {

        @Override
        public boolean isCellEditable(int row, int column) {

            return false;

        }
    }

    public Reporte_diario(String usuario, String contraseña) {

        try {
            con = new conexion_facturacion(usuario, contraseña);
            initComponents();

            dim = this.getToolkit().getScreenSize();

            System.out.println(dim);

            this.setSize(dim.width, dim.height - 40);

            con.conectar();
            modelof.addColumn("Hora");
            modelof.addColumn("Fecha");
            modelof.addColumn("Numero Doc");
            modelof.addColumn("Cliente");
            modelof.addColumn("Cliente Ruc");
            modelof.addColumn("Manguera");
            modelof.addColumn("Usuario");
            modelof.addColumn("Total");
            modelof.addColumn("Producto");
            modelof.addColumn("Estado Documento");
            modelof.addColumn("Metodo de Pago");

            modelop.addColumn("Hora");
            modelop.addColumn("Fecha");
            modelop.addColumn("Numero Doc");
            modelop.addColumn("Cliente");
            modelop.addColumn("Cliente Ruc");
            modelop.addColumn("Manguera");
            modelop.addColumn("Usuario");
            modelop.addColumn("Total");
            modelop.addColumn("Producto");
            modelop.addColumn("Estado Documento");
            modelop.addColumn("Placa");



            try {




                Statement st_s1 = con.coneccion.createStatement();
                ResultSet rids1 = st_s1.executeQuery("select nombre from usuarios ");

                desp.addItem("Todos");
                while (rids1.next()) {

                    desp.addItem(rids1.getString(1));

                }

            } catch (SQLException ex) {
                Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        totalf = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        credito = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        totalp = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        contado = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fechai = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        Date date = new Date();
        SpinnerDateModel sm =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        horai = new javax.swing.JSpinner(sm);
        jLabel9 = new javax.swing.JLabel();
        fechaf = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        Date date1 = new Date();
        SpinnerDateModel sm1 =
        new SpinnerDateModel(date1, null, null, Calendar.HOUR_OF_DAY);
        horaf = new javax.swing.JSpinner(sm1);
        jLabel5 = new javax.swing.JLabel();
        desp1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        desp = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        facturasp = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        facturas = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pagares = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("FECHA FINAL");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new java.awt.GridLayout(2, 4));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Total Dinero Facturas:");
        jPanel6.add(jLabel6);

        totalf.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel6.add(totalf);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Credito");
        jPanel6.add(jLabel8);

        credito.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel6.add(credito);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Total Dinero Pagares:");
        jPanel6.add(jLabel4);

        totalp.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel6.add(totalp);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Contado");
        jPanel6.add(jLabel7);

        contado.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel6.add(contado);

        jPanel1.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new java.awt.GridLayout(3, 5));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("FECHA INICIAL");
        jPanel5.add(jLabel1);

        fechai.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fechaiMouseClicked(evt);
            }
        });
        jPanel5.add(fechai);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("HORA INICIAL");
        jPanel5.add(jLabel11);

        JSpinner.DateEditor de = new JSpinner.DateEditor(horai, "HH:mm:ss");
        horai.setEditor(de);
        jPanel5.add(horai);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("FECHA FINAL");
        jPanel5.add(jLabel9);

        fechaf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fechafMouseClicked(evt);
            }
        });
        jPanel5.add(fechaf);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("HORA FINAL");
        jPanel5.add(jLabel10);

        JSpinner.DateEditor de1 = new JSpinner.DateEditor(horaf, "HH:mm:ss");
        horaf.setEditor(de1);
        jPanel5.add(horaf);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Forma de Pago");
        jPanel5.add(jLabel5);

        desp1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Contado", "Credito" }));
        desp1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                desp1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                desp1MouseReleased(evt);
            }
        });
        desp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desp1ActionPerformed(evt);
            }
        });
        jPanel5.add(desp1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Despachadores");
        jPanel5.add(jLabel3);

        desp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                despMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                despMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                despMouseReleased(evt);
            }
        });
        desp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                despItemStateChanged(evt);
            }
        });
        desp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                despActionPerformed(evt);
            }
        });
        jPanel5.add(desp);

        jPanel1.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new java.awt.GridLayout(2, 4, 5, 5));
        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 5, 5));

        facturasp.setBackground(new java.awt.Color(255, 255, 255));
        facturasp.setBorder(javax.swing.BorderFactory.createTitledBorder("Facturas"));
        facturasp.setLayout(new java.awt.GridLayout(1, 0));

        facturas.setAutoCreateRowSorter(true);
        facturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(facturas);

        facturasp.add(jScrollPane1);

        jPanel2.add(facturasp);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Pagares"));
        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        pagares.setAutoCreateRowSorter(true);
        pagares.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(pagares);

        jPanel4.add(jScrollPane2);

        jPanel2.add(jPanel4);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1);

        jMenu1.setText("Exportar");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/enviar-correo-icono-4440-32.png"))); // NOI18N
        jMenuItem2.setText("Exportar Consolidado Mangueras");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/editar-secuencias-de-comandos-icono-6203-32.png"))); // NOI18N
        jMenuItem3.setText("Exportar Detallado Ventas");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/buscar-buscar-ampliar-icono-9048-32.png"))); // NOI18N
        jMenuItem4.setText("Exportar por tipo de Combustible ");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Buscar");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/buscar-buscar-ampliar-icono-9048-32.png"))); // NOI18N
        jMenuItem1.setText("Buscar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fechaiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaiMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaiMouseClicked

    private void desp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desp1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_desp1ActionPerformed

    private void desp1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_desp1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_desp1MouseReleased

    private void desp1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_desp1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_desp1MouseClicked

    public static void reiniciarJTable(javax.swing.JTable Tabla) {
        DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel();
        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }

    }

    private void despActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_despActionPerformed
    }//GEN-LAST:event_despActionPerformed

    private void despMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_despMouseReleased
    }//GEN-LAST:event_despMouseReleased

    private void despMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_despMouseClicked
    }//GEN-LAST:event_despMouseClicked

    private void fechafMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechafMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_fechafMouseClicked

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
    }//GEN-LAST:event_jMenu2ActionPerformed
    String condicionp, condicionf, condicionn, condicion;
    Double totaln;

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        fechain = fechai.getDate();
        fechafin = fechaf.getDate();



        try {

            contado.setText("");
            credito.setText("");
            totalf.setText("");
            totalp.setText("");

            String usuarios, usuariosr;
            if (desp.getSelectedItem().toString().equalsIgnoreCase("Todos")) {
                usuarios = "";
                usuariosr = "";
            } else {
                usuariosr = "and nombre='" + desp.getSelectedItem() + "'";
                usuarios = "and usuarios.nombre='" + desp.getSelectedItem() + "'";
            }

            String fp;
            if (desp1.getSelectedItem().toString().equalsIgnoreCase("Todos")) {
                fp = "";

            } else {
                fp = "and metodo_pago in('" + desp1.getSelectedItem() + "','pagare')";
            }

            String horafa, horap, horaino;
            String horain, horafi, horafno;

            SimpleDateFormat df1 = new SimpleDateFormat("HH:mm:ss");

            if (horai.getValue().toString().equalsIgnoreCase(horaf.getValue().toString())) {
                horafa = "fecha between '" + formato.format(fechai.getDate()) + "' and '" + formato.format(fechaf.getDate()) + "'";
                horap = "fecha between '" + formato.format(fechai.getDate()) + "' and '" + formato.format(fechaf.getDate()) + "'";
                horaino = "fecha between '" + formato.format(fechai.getDate()) + "' and '" + formato.format(fechaf.getDate()) + "'";
            } else {


                horafa = "(CONVERT(concat_ws(' ', fecha, hora),DATETIME) >= CONVERT('" + formato.format(fechai.getDate()) + " " + df1.format(horai.getValue()) + "',DATETIME) and CONVERT(concat_ws(' ', fecha, hora),DATETIME) <= CONVERT('" + formato.format(fechaf.getDate()) + " " + df1.format(horaf.getValue()) + "',DATETIME)) ";
                horap = "(CONVERT(concat_ws(' ', fecha, hora),DATETIME) >= CONVERT('" + formato.format(fechai.getDate()) + " " + df1.format(horai.getValue()) + "',DATETIME) and CONVERT(concat_ws(' ', fecha, hora),DATETIME) <= CONVERT('" + formato.format(fechaf.getDate()) + " " + df1.format(horaf.getValue()) + "',DATETIME)) ";
                horaino = "(CONVERT(concat_ws(' ', nota_credito.fecha, nota_credito.hora),DATETIME) >= CONVERT('" + formato.format(fechai.getDate()) + " " + df1.format(horai.getValue()) + "',DATETIME) and CONVERT(concat_ws(' ', nota_credito.fecha, nota_credito.hora),DATETIME) <= CONVERT('" + formato.format(fechaf.getDate()) + " " + df1.format(horaf.getValue()) + "',DATETIME))";
            }

            reiniciarJTable(facturas);
            reiniciarJTable(pagares);

            String bfactura = "SELECT\n"
                    + "     factura.hora, "
                    + "     factura.`fecha` AS factura_fecha,\n"
                    + "     CAST(SUBSTRING(numero,9)  AS DECIMAL(10)),\n"
                    + "     cliente.`nombre` AS cliente_nombre,\n"
                    + "     cliente.`cedula_ruc` AS cliente_cedula_ruc,\n"
                    + "	factura_detalle.`configuracion_nmanguera` AS factura_detalle_configuracion_nmanguera,\n"
                    + "	usuarios.`nombre` AS usuarios_nombre, 	\n"
                    + "	factura.`total` AS factura_total,\n"
                    + "	producto.`nombre` AS producto_nombre,	\n"
                    + "	factura.`Estado_factura` AS factura_Estado_factura,\n"
                    + "     factura.`metodo_pago` AS factura_metodo_pago\n"
                    + "FROM\n"
                    + "     `cliente` cliente INNER JOIN `factura` factura ON cliente.`idcliente` = factura.`cliente_idcliente`\n"
                    + "     INNER JOIN `usuarios` usuarios ON factura.`usuarios_idusuarios` = usuarios.`idusuarios`\n"
                    + "     INNER JOIN `factura_detalle` factura_detalle ON factura.`idfactura` = factura_detalle.`factura_idfactura`\n"
                    + "     INNER JOIN `configuracion` configuracion ON factura_detalle.`configuracion_nmanguera` = configuracion.`nmanguera`\n"
                    + "     INNER JOIN `producto` producto ON factura_detalle.`producto_idproducto` = producto.`idproducto`\n"
                    + "	INNER JOIN `punto_emision` punto_emision ON factura.`punto_emision_idpunto_emision` = punto_emision.`idpunto_emision`\n"
                    + "     where " + horafa + " " + fp + " " + usuarios + " ";

            System.out.println(bfactura);

            fin = formato.format(fechai.getDate());
            ff = formato.format(fechaf.getDate());

            condicionf = horafa + " " + fp + " " + usuarios + "";
            condicion = horafa + " " + fp + " " + usuariosr + "";

            System.out.println(condicionf);

            Statement st_in = con.coneccion.createStatement();
            ResultSet consultan2 = st_in.executeQuery(bfactura);

            Object datos1[] = new Object[11];

            while (consultan2.next()) {
                for (int i = 0; i < 11; i++) {

                    datos1[i] = consultan2.getObject(i + 1);

                    //datos[i] = consultac.getObject(i + 1);
                }
                modelof.addRow(datos1);
            }

            String nombre = "SELECT\n"
                    + "     pagare.hora, "
                    + "     pagare.`fecha` AS pagare_fecha,\n"
                    + "     pagare.`idpagare` AS pagare_idpagare,\n"
                    + "     cliente.`nombre` AS cliente_nombre,\n"
                    + "     cliente.`cedula_ruc` AS cliente_cedula_ruc,\n"
                    + "     pagare.`configuracion_nmanguera` AS pagare_configuracion_nmanguera,\n"
                    + "     usuarios.`nombre` AS usuarios_usuario,\n"
                    + "     pagare.`total` AS pagare_total,\n"
                    + "     producto.`nombre` AS producto_nombre,\n"
                    + "     if(pagare.`facturado`=1,'Facturado','No Facturado') AS pagare_facturado,\n"
                    + "     pagare.placa "
                    + "FROM\n"
                    + "     `cliente` cliente INNER JOIN `pagare` pagare ON cliente.`idcliente` = pagare.`cliente_idcliente`\n"
                    + "     INNER JOIN `usuarios` usuarios ON pagare.`usuarios_idusuarios` = usuarios.`idusuarios`\n"
                    + "     INNER JOIN `configuracion` configuracion ON pagare.`configuracion_nmanguera` = configuracion.`nmanguera`\n"
                    + "     INNER JOIN `producto` producto ON configuracion.`producto_idproducto` = producto.`idproducto` "
                    + "     where " + horap + " " + usuarios + "";

            condicionp = horap + " " + usuarios + "";

            Statement st_in1 = con.coneccion.createStatement();
            ResultSet consultanp = st_in1.executeQuery(nombre);

            Object datosp[] = new Object[11];

            while (consultanp.next()) {
                for (int i = 0; i < 11; i++) {

                    datosp[i] = consultanp.getObject(i + 1);

                    //datos[i] = consultac.getObject(i + 1);
                }
                modelop.addRow(datosp);
            }

            condicionn = horaino + " " + usuarios + "";

            Statement st_int = con.coneccion.createStatement();
            ResultSet consultano = st_int.executeQuery("SELECT\n"
                    + "    sum(nota_credito.`valor_modificacion`) AS nota_credito_valor_modificacion,\n"
                    + "     nota_credito_detalle.`cantidad` AS nota_credito_detalle_cantidad,\n"
                    + "     producto.`nombre` AS producto_nombre\n"
                    + "FROM\n"
                    + "     `nota_credito` nota_credito INNER JOIN `nota_credito_detalle` nota_credito_detalle ON nota_credito.`idnota_credito` = nota_credito_detalle.`nota_credito_idnota_credito`\n"
                    + "     INNER JOIN `producto` producto ON nota_credito_detalle.`producto_idproducto` = producto.`idproducto`\n"
                    + "     INNER JOIN `usuarios` usuarios ON nota_credito.`usuarios_idusuarios` = usuarios.`idusuarios`\n"
                    + "where " + condicionn + "");
            while (consultano.next()) {

                totaln = consultano.getDouble(1);
            }




        } catch (SQLException ex) {
            Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
        }

        pagares.setModel(modelop);
        sorterp = new TableRowSorter<TableModel>(modelop);

        facturas.setModel(modelof);
        sorterf = new TableRowSorter<TableModel>(modelof);

        total = (suma(facturas) + suma(pagares)) - (totaln);
        totalf.setText(df.format(suma(facturas)));
        totalp.setText(df.format(suma(pagares)));

        contado.setText(df.format(sumaC(facturas)));

        credito.setText(df.format(sumaCr(facturas)));


    }//GEN-LAST:event_jMenuItem1ActionPerformed
    String fin, ff;
    double total;
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {



            con.conectar();
            Map parameters = new HashMap();
            parameters.put("despachador", desp.getSelectedItem().toString());
            parameters.put("fechai", fin);
            parameters.put("fechaf", ff);
            parameters.put("condicion1", condicion);
            parameters.put("condicion", condicionp);
            parameters.put("condicionf", condicionf);
            parameters.put("totalp", suma(pagares));
            parameters.put("totalfc", suma(facturas));
            parameters.put("cnotas", condicionn);
            parameters.put("totaln", totaln);
            parameters.put("consolidado", total);

            System.out.println(condicionf);
            System.out.println(condicionp);
            JasperReport report = JasperCompileManager.compileReport("ReporteDiario.jrxml");
            JasperPrint print = JasperFillManager.fillReport(report, parameters, con.coneccion);
            // Exporta el informe a PDF

            
//JasperExportManager.exportReportToPdfFile(print, "venta_combu.pdf");
            //Para visualizar el pdf directamente desde java
            JasperViewer.viewReport(print, false);

        } catch (JRException ex) {
            Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void despMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_despMousePressed
    }//GEN-LAST:event_despMousePressed

    private void despItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_despItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            try {
                fechafin = fechaf.getDate();
                if (fechafin == null) {
                } else {



                    String horas = "SELECT\n"
                            + "     reportes_usuario.`horai` AS reportes_usuario_horai,\n"
                            + "     reportes_usuario.`horas` AS reportes_usuario_horas\n"
                            + "FROM\n"
                            + "     `usuarios` usuarios INNER JOIN `reportes_usuario` reportes_usuario ON usuarios.`idusuarios` = reportes_usuario.`usuarios_idusuarios`"
                            + "where usuarios.nombre='" + desp.getSelectedItem().toString() + "' and fecha_final='" + formato.format(fechafin) + "'";

                    System.out.println(horas);

                    Statement st_in = con.coneccion.createStatement();
                    ResultSet consultanp = st_in.executeQuery(horas);
                    if (consultanp.first()) {

                        System.out.println(consultanp.getString(1));
                        horai.setValue(consultanp.getObject(1));
                        horaf.setValue(consultanp.getObject(2));

                    }
                }

// TODO add your handling code here:
            } catch (SQLException ex) {
                Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_despItemStateChanged

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {



            con.conectar();
            Map parameters = new HashMap();
            parameters.put("despachador", desp.getSelectedItem().toString());
            parameters.put("fechai", fin);
            parameters.put("fechaf", ff);
            parameters.put("condicion1", condicion);
            parameters.put("condicion", condicionp);
            parameters.put("condicionf", condicionf);
            parameters.put("totalp", suma(pagares));
            parameters.put("totalfc", suma(facturas));
            parameters.put("cnotas", condicionn);
            parameters.put("totaln", totaln);
            parameters.put("consolidado", total);

            System.out.println(condicionf);
            System.out.println(condicionp);
            JasperReport report = JasperCompileManager.compileReport("ReporteDiario_detallado.jrxml");
            JasperPrint print = JasperFillManager.fillReport(report, parameters, con.coneccion);
            // Exporta el informe a PDF
            //JasperExportManager.exportReportToPdfFile(print, "venta_combu.pdf");
            //Para visualizar el pdf directamente desde java
            JasperViewer.viewReport(print, false);

        } catch (JRException ex) {
            Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {







            con.conectar();
            Map parameters = new HashMap();

            parameters.put("condicion", condicion);


            System.out.println(condicion);

            PreparedStatement myStatement = con.coneccion.prepareStatement("SET lc_time_names = 'es_EC';");
            myStatement.executeUpdate();

            JasperReport report = JasperCompileManager.compileReport("Reporte_tipo_combustible.jrxml");
            JasperPrint print = JasperFillManager.fillReport(report, parameters, con.coneccion);
            // Exporta el informe a PDF
            //JasperExportManager.exportReportToPdfFile(print, "venta_combu.pdf");
            //Para visualizar el pdf directamente desde java
            JasperViewer.viewReport(print, false);

        } catch (JRException ex) {
            Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Reporte_diario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    Date fechain;
    Date fechafin;
    SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
    SimpleDateFormat horafo = new SimpleDateFormat("HH-MM-SS");
    DecimalFormat df = new DecimalFormat("#.##");

    private Double suma(JTable tabla) {
        Double total = 0.00;
        //recorrer todas las filas de la segunda columna y va sumando las cantidades
        for (int i = 0; i < tabla.getModel().getRowCount(); i++) {

            Double numero = 0.00;
            try {

                //capturamos valor de celda
                numero = Double.valueOf(tabla.getValueAt(i, 7).toString());

            } catch (NumberFormatException nfe) { //si existe un error se coloca 0 a la celda
                System.out.println(nfe.getMessage());
                numero = 0.00;
                tabla.getModel().setValueAt(0, i, 1);
            }
            //se suma al total
            total += numero;
        }
        //muestra en el componente

        return total;

    }

    private Double sumaC(JTable tabla) {
        Double total = 0.00;
        //recorrer todas las filas de la segunda columna y va sumando las cantidades
        for (int i = 0; i < tabla.getRowCount(); i++) {

            Double numero = 0.00;
            try {

                //capturamos valor de celda
                numero = Double.valueOf(tabla.getValueAt(i, 7).toString());

            } catch (NumberFormatException nfe) { //si existe un error se coloca 0 a la celda
                System.out.println(nfe.getMessage());
                numero = 0.00;
                tabla.getModel().setValueAt(0, i, 1);
            }
            //se suma al total

            if (tabla.getModel().getValueAt(i, 10).toString().equalsIgnoreCase("Contado")) {

                total += numero;

            }

        }
        //muestra en el componente

        return total;

    }

    private Double sumaCr(JTable tabla) {
        Double total = 0.00;
        //recorrer todas las filas de la segunda columna y va sumando las cantidades
        for (int i = 0; i < tabla.getRowCount(); i++) {

            Double numero = 0.00;
            try {

                //capturamos valor de celda
                numero = Double.valueOf(tabla.getValueAt(i, 7).toString());

            } catch (NumberFormatException nfe) { //si existe un error se coloca 0 a la celda
                System.out.println(nfe.getMessage());
                numero = 0.00;
                tabla.getModel().setValueAt(0, i, 1);
            }
            //se suma al total

            if (tabla.getModel().getValueAt(i, 10).toString().equalsIgnoreCase("Credito")) {

                total += numero;

            }

        }
        //muestra en el componente

        return total;

    }

    private Double sumaf(JTable tabla, String forma) {
        Double total = 0.00;
        //recorrer todas las filas de la segunda columna y va sumando las cantidades
        for (int i = 0; i < tabla.getRowCount(); i++) {

            Double numero = 0.00;
            try {

                //capturamos valor de celda
                numero = Double.valueOf(tabla.getValueAt(i, 7).toString());

            } catch (NumberFormatException nfe) { //si existe un error se coloca 0 a la celda
                System.out.println(nfe.getMessage());
                numero = 0.00;
                tabla.getModel().setValueAt(0, i, 1);
            }
            //se suma al total

            if (tabla.getValueAt(i, 11).toString().equalsIgnoreCase(forma)) {

                total += numero;

            }
        }
        //muestra en el componente

        return total;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reporte_diario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reporte_diario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reporte_diario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reporte_diario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Reporte_diario().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel contado;
    private javax.swing.JLabel credito;
    private javax.swing.JComboBox desp;
    private javax.swing.JComboBox desp1;
    private javax.swing.JTable facturas;
    private javax.swing.JPanel facturasp;
    private com.toedter.calendar.JDateChooser fechaf;
    private com.toedter.calendar.JDateChooser fechai;
    private javax.swing.JSpinner horaf;
    private javax.swing.JSpinner horai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable pagares;
    private javax.swing.JLabel totalf;
    private javax.swing.JLabel totalp;
    // End of variables declaration//GEN-END:variables
}
