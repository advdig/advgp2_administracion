/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;

//import com.sun.org.apache.xerces.internal.parsers.DOMParser;
import conexion.conexion_facturacion;
import ec.gob.sri.comprobantes.ws.RespuestaSolicitud;
import ec.gob.sri.comprobantes.ws.aut.Autorizacion;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.JAXBException;
import javax.xml.datatype.XMLGregorianCalendar;
import reportes.reporte_factura;
import seguridad.CertificadosSSL;
import util.ArchivosUtil;
import util.XMLUtil;
import ws.AutorizacionComprobantesWS;
import ws.EnvioComprobantesWS;

/**
 *
 * @author r
 */
public class enviar_facturas_contingencia2 extends javax.swing.JInternalFrame {

    private DefaultListModel modelo = new DefaultListModel();
    MiModelo litabla = new MiModelo();
    String codigop = "";
    Double cantidad, pu;
    String ocont = "";
    int cespecial = 0;
    String nc = "";
    String rz = "", np = "", d = "", r = "", na = "", clientr = "", tcliente = "";
    String s1 = "", s2 = "", tel = "";
    String ss3 = "", ta = "";
    int s3 = 0, idcliente = 0;
    String ti = "";
    String ncliente = "", email = "", cadena = "",mail,contra;
   String usuario,contraseña;

    /**
     * Creates new form enviar_facturas_contingencia
     */
    public enviar_facturas_contingencia2(String usuario,String contraseña) {

        this.usuario=usuario;
        this.contraseña=contraseña;
        initComponents();
        tabla.setModel(litabla);


        litabla.addColumn("Id");
        litabla.addColumn("Factura");
        litabla.addColumn("Fecha");
        litabla.addColumn("Cliente Ruc");
        litabla.addColumn("Cliente");
        litabla.addColumn("Motivo");
        litabla.addColumn("Xml");

        llenar();









    }

    

    public void llenar() {
        try {
            String nombre;
            conexion_facturacion n = new conexion_facturacion(usuario,contraseña);
            n.conectar();

            nombre = "SELECT idxml_contingencia,numero,fecha,cedula_ruc,nombre,motivo,xml_contingencia FROM adv_xml.xml_contingencia, adv_facturacion.factura,adv_facturacion.cliente where xml_factura=idfactura and cliente_idcliente=idcliente and (factura.punto_emision_idpunto_emision=2 or factura.punto_emision_idpunto_emision=3 or factura.punto_emision_idpunto_emision=4)group by xml_factura;";


            ResultSet consultan = n.consulta(nombre);

            Object datos[] = new Object[6];

            while (consultan.next()) {
                for (int i = 0; i < 6; i++) {

                      datos[i] = consultan.getObject(i + 1);


                    //datos[i] = consultac.getObject(i + 1);
                }
                litabla.addRow(datos);
            }

            tabla.setModel(litabla);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(enviar_facturas_contingencia2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(enviar_facturas_contingencia2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public class MiModelo extends DefaultTableModel {

        @Override
        public boolean isCellEditable(int row, int column) {

            return false;

        }
    }
    DefaultTableModel temp;

    public void limpiaTabla() {
        try {
            temp = (DefaultTableModel) tabla.getModel();
            int a = temp.getRowCount() - 1;
            for (int i = 0; i <= a; i++) {
                temp.removeRow(0); //aquí estaba el error, antes pasaba la i como parametro.... soy un bacín  XD
            }
        } catch (Exception e) {
            System.out.println(e);
        }


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        mensajesR = new javax.swing.JTextArea();

        jMenuItem1.setText("Enviar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setTitle("Facturas Contingencia");
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridLayout(2, 0));

        tabla.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.setComponentPopupMenu(jPopupMenu1);
        tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(tabla);

        jPanel1.add(jScrollPane1);

        mensajesR.setColumns(20);
        mensajesR.setRows(5);
        jScrollPane2.setViewportView(mensajesR);

        jPanel1.add(jScrollPane2);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        int[] s = tabla.getSelectedRows();

        int ns = tabla.getSelectedRowCount();







        for (int i = 0; i < tabla.getSelectedRowCount(); i++) {


            int id = Integer.parseInt(String.valueOf(tabla.getValueAt(tabla.getSelectedRows()[i], 0)));
            String factura = String.valueOf(tabla.getValueAt(tabla.getSelectedRows()[i], 1));

            String fecha = String.valueOf(tabla.getValueAt(tabla.getSelectedRows()[i], 2));
            String cliente_ruc = String.valueOf(tabla.getValueAt(tabla.getSelectedRow(), 3));
            ncliente = String.valueOf(tabla.getValueAt(tabla.getSelectedRows()[i], 4));
            System.out.println(factura);

            generar(id, factura, fecha, cliente_ruc, ncliente);






        }

        limpiaTabla();
        llenar();





    }//GEN-LAST:event_jMenuItem1ActionPerformed
    ArchivosUtil au = new ArchivosUtil();
    XMLUtil Cxml = new XMLUtil();

    
    
    
    
    
    public void generar(int id, String numero, String fecha, String rcliente, String cliente) {
        try {

             String Ewsri;
             String Awsri;

            int xml_factura = 0;
            String fechaE = "";
            Double total = null, subtotal = null, iva = null;
            String producto = null;
            int cp = 0;
            conexion_facturacion n = new conexion_facturacion("root", "manager");
            n.conectar();

            Statement st_in = n.coneccion.createStatement();
            ResultSet ri = st_in.executeQuery("SELECT razon_social,ruc,direccion,email_estacion,secuencia1_factura,s2,tipo_ambiente,obligado_llevar_contabilidad,nombre_comercial,contribuyente_especial,AES_DECRYPT(contraseña_mail,'thekey') FROM adv_facturacion.datos_gasolinera , adv_facturacion.punto_emision where datos_gasolinera_iddatos_gasolinera=iddatos_gasolinera and idpunto_emision=1");


            while (ri.next()) {

                rz = ri.getString(1);
                d = ri.getString(3);
                r = ri.getString(2);
                s1 = ri.getString(5);
                s2 = ri.getString(6);
                ta = ri.getString(7);
                ocont = ri.getString(8);
                nc = ri.getString(9);
                cespecial = ri.getInt(10);
                mail=ri.getString(4);
                contra=ri.getString(11);

            }


             if(ta.equalsIgnoreCase("1")){
            
            
                Ewsri="https://celcer.sri.gob.ec/comprobantes-electronicos-ws/RecepcionComprobantes?wsdl";
                Awsri="https://celcer.sri.gob.ec/comprobantes-electronicos-ws/AutorizacionComprobantes?wsdl";
           
            }else{
            
               Ewsri="https://cel.sri.gob.ec/comprobantes-electronicos-ws/RecepcionComprobantes?wsdl";
               Awsri="https://cel.sri.gob.ec/comprobantes-electronicos-ws/AutorizacionComprobantes?wsdl";
           
            
                
            
            }












            FileOutputStream outpu = null;



            String xmlS = "SELECT xml_contingencia.xml_factura,factura.fecha,xml_contingencia,clave_acceso,email,cantidad,punit,producto.nombre,idproducto,factura.iva,factura.total FROM adv_xml.xml_contingencia, adv_facturacion.factura,adv_facturacion.cliente,adv_facturacion.clave_acceso,adv_facturacion.factura_detalle,adv_facturacion.configuracion,adv_facturacion.producto where xml_factura=idfactura and factura.cliente_idcliente=idcliente and clave_acceso_idclave_acceso=idclave_acceso and factura_idfactura=idfactura and configuracion_nmanguera=nmanguera and factura_detalle.producto_idproducto=idproducto and  idxml_contingencia='" + id + "';";

            System.out.println(xmlS);

            ResultSet rs = n.consulta(xmlS);
            while (rs.next()) {

                xml_factura = rs.getInt(1);
                fechaE = rs.getString(2);
                cadena = rs.getString(4);
                email = rs.getString(5);
                cantidad = rs.getDouble(6);
                pu = rs.getDouble(7);
                producto = rs.getString(8);
                cp = rs.getInt(9);
                iva = rs.getDouble(10);
                total = rs.getDouble(11);

                String pathname = "firmados\\firmado" + numero + ".xml";
                File file = new File(pathname);
                outpu = new FileOutputStream(file);
                Blob archivo = rs.getBlob(3);
                InputStream inStream = archivo.getBinaryStream();
                int size = (int) archivo.length();
                byte[] buffer = new byte[size];
                int length = -1;
                while ((length = inStream.read(buffer)) != -1) {
                    outpu.write(buffer, 0, length);
                }
                outpu.close();




            }









           
           
          
            if (au.existeConexion(Ewsri,Awsri)) {



                mensajesR.append("\n Factura de " + numero + "  xml creado " + s1 + "-" + s2 + "-" + ss3 + ".xml");

                File fichero = new File(numero + ".xml");
                fichero.delete();





                Date datef = new Date();
                DateFormat hourFormatf = new SimpleDateFormat("HH:mm:ss");

                mensajesR.append("\n Factura " + numero + "  xml firmado " + s1 + "-" + s2 + "-" + ss3 + "");

                File xsd = new File("factura_v1.0.0.xsd");
                File axml = new File("firmados\\firmado" + numero + ".xml");






                String motivo = "";

                CertificadosSSL ssl = new CertificadosSSL();
                ssl.instalarCertificados();




                EnvioComprobantesWS env = new EnvioComprobantesWS(Ewsri);

               RespuestaSolicitud response = env.enviarComprobante(axml);

                mensajesR.append("\n Factura de Manguera " + numero + "  xml enviado hora: ");

                //System.out.println(response.getComprobantes().getComprobante().get(0).getMensajes().getMensaje().get(0).getMensaje());

             

                //System.out.println(respuesta(envioRes, "estado"));


                mensajesR.append("\n Factura " + numero + " " + response.getEstado() + " hora:");

                mensajesR.append("\n Clave de acceso " + cadena);

                
                 System.out.println(response.getEstado());
                
                if(response.getEstado().equalsIgnoreCase("DEVUELTA")){
                
                      mensajesR.append("\n Factura " + numero + " " + response.getComprobantes().getComprobante().get(0).getMensajes().getMensaje().get(0).getMensaje() + " hora:");
                      System.out.println(response.getComprobantes().getComprobante().get(0).getMensajes().getMensaje().get(0).getInformacionAdicional());
                    
                
                }else{
                
              
                
                ec.gob.sri.comprobantes.ws.aut.RespuestaComprobante respuesta = null;
                respuesta = (new AutorizacionComprobantesWS(Awsri)).llamadaWSAutorizacionInd(cadena);
                List<Autorizacion> listaAutorizaciones = respuesta.getAutorizaciones().getAutorizacion();
                int c = 0;

                while (listaAutorizaciones.size() == 0) {

                    respuesta = (new AutorizacionComprobantesWS(Awsri)).llamadaWSAutorizacionInd(cadena);
                    listaAutorizaciones = respuesta.getAutorizaciones().getAutorizacion();
                    
                    c++;
                    if(c==20){
                        break;
                    
                    }
                
                }

                System.out.println("Intentos " + c);
                

                
                for (Autorizacion autorizacion : listaAutorizaciones) {
                    //Lógica de acceso a datos
                    String nAuto = autorizacion.getNumeroAutorizacion();
                    XMLGregorianCalendar fAuto = autorizacion.getFechaAutorizacion();
                    //--
                    
                    


                    String estado = autorizacion.getEstado().toUpperCase();

                    mensajesR.append("\n Factura " + numero + " " + estado + "");

                    if (estado.compareTo("AUTORIZADO") == 0) {
                        //msgAutorizacion.append(estado);

                        ArchivosUtil.guardarDocumentoXMLAutorizado(autorizacion, "autorizados\\autorizado" + numero + ".xml");

                        File archivox = new File("autorizados\\autorizado" + numero + ".xml");


                        if (ta.equalsIgnoreCase("1")) {

                            ta = "Pruebas";

                        } else {

                            ta = "Producccion";

                        }

                        System.out.println(xml_factura);
                        PreparedStatement xmlE = n.coneccion.prepareStatement("DELETE FROM `adv_xml`.`xml_contingencia` WHERE `xml_factura`='" + xml_factura + "';");

                        xmlE.execute();

                        reporte_factura rf = new reporte_factura();
                        rf.reporte_factura(numero, r, d, d, ocont, String.valueOf(cespecial), nAuto, String.valueOf(fAuto), cadena, "Contingencia", ta, rz, nc, ncliente, clientr, fechaE, "", String.valueOf(subtotal), String.valueOf(iva), String.valueOf(total), "0", codigop, producto, String.valueOf(cantidad), "Gasolina " + producto, String.valueOf(pu), "0");
                        rf.enviar_email(contra,mail, "autorizados\\autorizado" + numero + ".xml", "pdf\\" + numero + ".pdf", email, ncliente, rz, numero + ".pdf", "" + numero + ".xml");

                        PreparedStatement estadoF = n.coneccion.prepareStatement("UPDATE `adv_facturacion`.`factura` SET `Estado_factura`='AUTORIZADO' ,`numero_autorizacion`='"+String.valueOf(nAuto)+"' WHERE numero='" + numero + "'");

                        estadoF.execute();

                        FileInputStream in = new FileInputStream(archivox);
                        long datos = archivox.lastModified();


                        PreparedStatement myStatement = n.coneccion.prepareStatement("INSERT INTO adv_xml.xml_enviados_autorizados(doc_xml, xml_factura) VALUES(?, '" + xml_factura + "')");

                        
                        System.out.println("INSERT INTO adv_xml.xml_enviados_autorizados(doc_xml, xml_factura) VALUES(?, '" + xml_factura + "')");
                        myStatement.setBinaryStream(1, in, (int) archivox.length());
                        myStatement.executeUpdate();



                    

                    } else {




                        String mensajeE = null;
                        int con=0;
                        List<ec.gob.sri.comprobantes.ws.aut.Mensaje> mensajes = autorizacion.getMensajes().getMensaje();
                        for (ec.gob.sri.comprobantes.ws.aut.Mensaje mensaje : mensajes) {

                            ArchivosUtil.guardarDocumentoXMLAutorizado(autorizacion, "no_autorizados\\" + numero + ".xml");
                          
                            con++;

                            if(con==1){
                            
                                 mensajeE=mensaje.getMensaje();
                                
                            }
                              
                            
                            // mens.append("NO AUTORIZADO").append(".").append(mensaje.getTipo()).append(".").append(mensaje.getIdentificador()).append(".").append(mensaje.getMensaje()).append(".").append(mensaje.getInformacionAdicional()).append("\n");
                        }
                    
                        File archivox = new File("no_autorizados\\" + numero + ".xml");
                            PreparedStatement estadoF = n.coneccion.prepareStatement("UPDATE `adv_facturacion`.`factura` SET `Estado_factura`='NO AUTORIZADO' WHERE numero='" + numero + "'");

                            estadoF.execute();

                            FileInputStream in = new FileInputStream(archivox);
                            long datos = archivox.lastModified();
                            PreparedStatement myStatement = n.coneccion.prepareStatement("INSERT INTO adv_xml.xml_no_autorizados(doc_xml, xml_factura,motivo_no_autorizado) VALUES(?, '" + xml_factura + "', '" + mensajeE + "')");

                            myStatement.setBinaryStream(1, in, (int) archivox.length());
                            myStatement.executeUpdate();

                             PreparedStatement xmlE = n.coneccion.prepareStatement("DELETE FROM `adv_xml`.`xml_contingencia` WHERE `xml_factura`='" + xml_factura + "';");

                              xmlE.execute();
                    
                    }
                }
                }











            }
            else{
            
                mensajesR.setText("No hay Conexion Por favor Intente mas tarde");
            
            
            }
            n.coneccion.close();






        } catch (Exception ex) {
            
            System.out.println("error");
        } 
        /**
         * @param args the command line arguments
         */
    }

    
    
    
    /**
     * @param args the command line arguments
     */
    public String respuesta(String xml, String tag) {
        String message = "";

        /*




         DOMParser parser = new DOMParser();
         try {
         parser.parse(new InputSource(new java.io.StringReader(xml)));
         org.w3c.dom.Document doc = parser.getDocument();
         String raiz = doc.getDocumentElement().getNodeName();
         doc.getDocumentElement().normalize();
         // System.out.println("El elemento raíz es: " + raiz);
         NodeList listaPersonas = doc.getElementsByTagName(tag);
         //System.out.println(listaPersonas.getLength());


         for (int i = 0; i < listaPersonas.getLength(); i++) {

         Node persona = listaPersonas.item(i);




         message = persona.getTextContent();
         }




         } catch (IOException e) {
         // handle SAXException 
         } catch (SAXException ex) {
         Logger.getLogger(surtidores.class.getName()).log(Level.SEVERE, null, ex);
         }
         */
        return message;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(enviar_facturas_contingencia2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(enviar_facturas_contingencia2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(enviar_facturas_contingencia2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(enviar_facturas_contingencia2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new enviar_facturas_contingencia().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mensajesR;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
