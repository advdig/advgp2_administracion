



package Principal;
import conexion.ConnectionTableDB;
import conexion.conexion_facturacion;
import ec.gob.sri.comprobantes.ws.Comprobante;
import ec.gob.sri.comprobantes.ws.RespuestaSolicitud;
import ec.gob.sri.comprobantes.ws.aut.Autorizacion;
import ec.gob.sri.comprobantes.ws.aut.Mensaje;
import facturacion.crear_clave_acceso;
import facturacion.crear_factura_credito;
import facturacion.crear_nota_credito_normal1;
import java.awt.Color;
import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.*;
import javax.xml.bind.JAXBException;
import javax.xml.datatype.XMLGregorianCalendar;
import seguridad.CertificadosSSL;
import seguridad.FirmaDigital;
import util.ArchivosUtil;
import ws.AutorizacionComprobantesWS;
import ws.EnvioComprobantesWS;
public class buscarFactura extends javax.swing.JFrame {

    /**
     * Creates new form buscarFactura
     */    ConnectionTableDB model;
     String usu;
     String contra;
    public int filas=0;
     private int notaCredito;
Calendar c=Calendar.getInstance();
private String metodo;

    private InputStream PKCS12_RESOURCE;
    private String PKCS12_PASSWORD;
    private String Ewsri, Awsri;

    public buscarFactura(String usuario,String contras,String usuVendedor,String contVendedor) {
         usu=usuario;
        contra=contras;
        

      
        
        
        
        initComponents();
        
              ResultSet rs;
         try {
             conexion_facturacion he=new conexion_facturacion(usuario,contras);
             he.conectar();
             Statement st_in=he.coneccion.createStatement();
             
             
             rs = st_in.executeQuery("SELECT certificado_digital, AES_DECRYPT(contrase√±a_certificado,'thekey') FROM datos_gasolinera");
                     
                     rs.next();
            PKCS12_RESOURCE = rs.getBlob(1).getBinaryStream();
            PKCS12_PASSWORD = rs.getString(2); 
         } catch (SQLException ex) {
             Logger.getLogger(buscarFactura.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(buscarFactura.class.getName()).log(Level.SEVERE, null, ex);
         }  
        
        
      String  dia = Integer.toString(c.get(Calendar.DATE));
String mes = Integer.toString(c.get(Calendar.MONTH)+1);
String ano = Integer.toString(c.get(Calendar.YEAR));
String hora=Integer.toString(c.get(Calendar.HOUR_OF_DAY));
String minutos=Integer.toString(c.get(Calendar.MINUTE));
String segundos=Integer.toString(c.get(Calendar.SECOND));
if(Integer.parseInt(minutos)<10){
    minutos="0"+minutos;
}    
if(Integer.parseInt(segundos)<10){
    segundos="0"+segundos;
}  
        
        hoy.setText(ano+"-"+mes+"-"+dia);
        Hora.setText(hora+":"+minutos+":"+segundos);
         try {
             model = new ConnectionTableDB(usu, contra, "adv_facturacion", "select tipo_ambiente,secuencia1_factura,nombre_comercial,obligado_llevar_contabilidad,contribuyente_especial,razon_social,direccion,ruc from datos_gasolinera", false);
         } catch (SQLException ex) {
             Logger.getLogger(buscarFactura.class.getName()).log(Level.SEVERE, null, ex);
         }
             String ambiente=String.valueOf(model.getValueAt(0, 0));
        
               if (ambiente.equalsIgnoreCase("1")) {
                Ewsri = "https://celcer.sri.gob.ec/comprobantes-electronicos-ws/RecepcionComprobantes?wsdl";
                Awsri = "https://celcer.sri.gob.ec/comprobantes-electronicos-ws/AutorizacionComprobantes?wsdl";
            } else {
                Ewsri = "https://cel.sri.gob.ec/comprobantes-electronicos-ws/RecepcionComprobantes?wsdl";
                Awsri = "https://cel.sri.gob.ec/comprobantes-electronicos-ws/AutorizacionComprobantes?wsdl";
            }     
        
        
        
        
       this.setExtendedState(this.MAXIMIZED_BOTH);
       this.getContentPane().setBackground(Color.white);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        quitar = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        numero = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaResultado = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaCliente = new javax.swing.JTable();
        ci = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        hoy = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Hora = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaArticulos = new javax.swing.JTable();

        quitar.setText("quitar");
        quitar.setComponentPopupMenu(jPopupMenu1);
        quitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(quitar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nota Articulos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Ingrese el Numero de Factura");

        numero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numeroActionPerformed(evt);
            }
        });

        tablaResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaResultado);

        jLabel2.setText("Ingrese el CI/RUC del cliente correspondiente");

        tablaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombres", "CI/RUC", "Telefono", "Correo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClienteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tablaClienteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tablaClienteMouseExited(evt);
            }
        });
        jScrollPane4.setViewportView(tablaCliente);

        ci.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ciActionPerformed(evt);
            }
        });
        ci.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ciKeyTyped(evt);
            }
        });

        jLabel3.setText("Ingrese el Nombre del CLiente Correspondiente");

        nombre.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreActionPerformed(evt);
            }
        });
        nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreKeyTyped(evt);
            }
        });

        jButton1.setText("Crear NOta de Credito");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Fecha Hoy");

        hoy.setEnabled(false);

        jLabel5.setText("Hora");

        Hora.setEnabled(false);

        tablaArticulos.setAutoCreateRowSorter(true);
        tablaArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaArticulos.setComponentPopupMenu(jPopupMenu1);
        tablaArticulos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablaArticulos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaArticulosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tablaArticulos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(39, 39, 39)
                        .addComponent(numero, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115)
                        .addComponent(jLabel4)
                        .addGap(33, 33, 33)
                        .addComponent(hoy, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(Hora, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ci, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(560, 560, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(hoy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(Hora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(ci, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void numeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numeroActionPerformed
String num=numero.getText();
            DefaultTableModel tabla=(DefaultTableModel) tablaResultado.getModel(); 
DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
centerRenderer.setBackground(Color.YELLOW);
         try {// hago la busqueda de la factura,datos del cliente y vendedor
             model = new ConnectionTableDB(usu, contra, "adv_facturacion", "SELECT Estado_Factura,Fecha,Hora,Metodo_Pago,Cedula_ruc,Cliente.nombre as nombreCliente,usuarios.nombre as nombreVendedor,punto_emision_idpunto_emision\n" +
                                                                            "FROM factura,cliente,usuarios\n" +
                                                                            "WHERE cliente_idcliente=idcliente AND usuarios_idusuarios=idusuarios AND numero='"+num+"' AND (Estado_factura='AUTORIZADO' OR Estado_factura='Contingencia')", false);
             if(String.valueOf(model.getValueAt(0, 0)).equals("")){
             JOptionPane.showMessageDialog(this, "ese numero de factura no existe o no esta autorizada");
             
             if(tabla.getRowCount()!=0){
                 for(int i=0;i<tabla.getColumnCount();i++){
                 tabla.setValueAt("", 0, i);
                 }
             }
             }else{
             metodo=String.valueOf(model.getValueAt(0, 3));
             String[] a=new String[model.getColumnCount()];
             for(int i=0;i<model.getColumnCount();i++){
             a[i]=String.valueOf(model.getColumnName(i));
             }
             tabla.setColumnIdentifiers(a);
             for(int i=0;i<model.getColumnCount();i++){
                 tabla.setValueAt(String.valueOf(model.getValueAt(0, i)), 0, i);
             }
             numero.setEnabled(false);
             }
             
DefaultTableModel tabla2=(DefaultTableModel) tablaArticulos.getModel(); 

              model = new ConnectionTableDB(usu, contra, "adv_facturacion", "select cantidad,factura_detalle.subtotal,factura_detalle.total,factura_detalle.iva,nombre,punit,idproducto \n" +
"from factura,factura_detalle,producto\n" +
"where idproducto=producto_idproducto and factura_idfactura=idfactura and numero='"+num+"'", false);
             String[] a=new String[model.getColumnCount()];
             for(int i=0;i<model.getColumnCount();i++){
             a[i]=String.valueOf(model.getColumnName(i));
             }
              
                   tabla2.setColumnIdentifiers(a);
              for(int i=0;i<model.getRowCount();i++){
tabla2.addRow(new Object[]{"","","","","","",""});

                  for(int j=0;j<model.getColumnCount();j++){
                      tabla2.setValueAt(String.valueOf(model.getValueAt(i, j)), i,j);
                  
                  }
              }
              tablaArticulos.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);

            // tablaArticulos.setModel(model);
// TODO add your handling code here:
         } catch (SQLException ex) {
             JOptionPane.showConfirmDialog(this, "ERROR CON LA BASE DE DATOS");
             Logger.getLogger(buscarFactura.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_numeroActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
     //principalAceites.conS.setEnabled(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void tablaClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClienteMouseClicked
int filas = tablaCliente.getSelectedRow();
nombre.setText(String.valueOf(tablaCliente.getValueAt(filas, 0)));
ci.setText(String.valueOf(tablaCliente.getValueAt(filas, 1)));

        // TODO add your handling code here:
    }//GEN-LAST:event_tablaClienteMouseClicked

    private void tablaClienteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClienteMouseEntered
        this.setCursor(Cursor.HAND_CURSOR);        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaClienteMouseEntered

    private void tablaClienteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClienteMouseExited
        this.setCursor(Cursor.DEFAULT_CURSOR);        // TODO add your handling code here:
    }//GEN-LAST:event_tablaClienteMouseExited

    private void ciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ciActionPerformed
        //me realiza el ingreso de los datos directamento por ci
        String consulta = "SELECT nombre,telefono,email FROM cliente WHERE cedula_ruc='"+ci.getText()+"'";
        try {
            model = new ConnectionTableDB(usu, contra, "adv_facturacion", consulta, false);
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());

        }
  

        // TODO add your handling code here:        // TODO add your handling code here:
    }//GEN-LAST:event_ciActionPerformed

    private void ciKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ciKeyTyped
        //hago las busquedas por ci
        char c = evt.getKeyChar();
        int filas;
        busqueda(ci.getText(),"cedula_ruc");

        // TODO add your handling code here:
    }//GEN-LAST:event_ciKeyTyped

    private void nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreActionPerformed

    }//GEN-LAST:event_nombreActionPerformed

    private void nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreKeyTyped
        char c = evt.getKeyChar();
        int filas;
        //realizo las busquedas de los clientes segun lo queescriba en el nombre

        busqueda(nombre.getText(),"nombre");
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
if(tablaResultado.getRowCount()>0){
String fechaFactura=String.valueOf(tablaResultado.getValueAt(0, 1));
String f[]=new String[3];
f=fechaFactura.split("-");
fechaFactura=f[2]+"/"+f[1]+"/"+f[0];
String idC=String.valueOf(tablaResultado.getValueAt(0, 4));
String sec2=String.valueOf(tablaResultado.getValueAt(0, 7));
for (int i=0;i<2;i++){
sec2="0"+sec2;
}
String factura=numero.getText();
String fechaEmision=hoy.getText();

f=fechaEmision.split("-");
fechaEmision=f[2]+"/"+f[1]+"/"+f[0];
System.out.println(fechaEmision);
System.out.println(fechaFactura);






         try {
             model = new ConnectionTableDB(usu, contra, "adv_facturacion", "select tipo_ambiente,secuencia1_factura,nombre_comercial,obligado_llevar_contabilidad,contribuyente_especial,razon_social,direccion,ruc from datos_gasolinera", false);
             String ambiente=String.valueOf(model.getValueAt(0, 0));
             String sec1=String.valueOf(model.getValueAt(0, 1));
             String nomComercial=String.valueOf(model.getValueAt(0, 2));
             String contabilidad=String.valueOf(model.getValueAt(0, 3));
             int contribuyente=Integer.parseInt(String.valueOf(model.getValueAt(0, 4)));
             String razon=String.valueOf(model.getValueAt(0, 5));
             String direccion=String.valueOf(model.getValueAt(0, 6));
             String ruc=String.valueOf(model.getValueAt(0, 7));
             
             
             model.consulta("SHOW TABLE STATUS FROM adv_facturacion LIKE 'nota_credito'");
             String num = String.format("%09d", ((java.math.BigInteger) model.getValueAt(0, 10)).intValue());
             model.consulta("select  cantidad,factura_detalle.subtotal,factura_detalle.total,factura_detalle.iva, producto.nombre,idproducto,punit,tipo_identificacion,idcliente,factura.usuarios_idusuarios,factura.idfactura\n" +
"from producto,factura,factura_detalle,cliente\n" +
"where producto_idproducto=idproducto and idfactura=factura_idfactura and numero='"+factura+"' and idcliente=cliente_idcliente");
num="000000317";
             System.out.println(String.valueOf(model.getValueAt(0, 0)));
             //double cantidad=Double.parseDouble(String.valueOf(model.getValueAt(0, 0)));
             //double subt=Double.parseDouble(String.valueOf(model.getValueAt(0, 1)));
             //double tot=Double.parseDouble(String.valueOf(model.getValueAt(0, 2)));
             //double iva=Double.parseDouble(String.valueOf(model.getValueAt(0, 3)));
             //String nomProd=String.valueOf(model.getValueAt(0, 4));
            // String idProd=String.valueOf(model.getValueAt(0, 5));
            // double punit=Double.parseDouble(String.valueOf(model.getValueAt(0, 6)));
             
             Double[] cantidad= new Double[tablaArticulos.getRowCount()];
             Double[] subt= new Double[tablaArticulos.getRowCount()];
             Double[] tot= new Double[tablaArticulos.getRowCount()];
             Double[] iva= new Double[tablaArticulos.getRowCount()];
             Double[] punit= new Double[tablaArticulos.getRowCount()];
             String[] nomProd=new String[tablaArticulos.getRowCount()];
             String[] idProd=new String[tablaArticulos.getRowCount()];
             String idFactura=String.valueOf(model.getValueAt(0, 10));
             Double to=0.0;
             Double sub=00.0;
             Double iv=0.0;
             for (int i=0;i<tablaArticulos.getRowCount();i++){
             cantidad[i]=Double.parseDouble(String.valueOf(model.getValueAt(i, 0)));
             subt[i]=Double.parseDouble(String.valueOf(model.getValueAt(i, 1)));
             tot[i]=Double.parseDouble(String.valueOf(model.getValueAt(i, 2)));
             iva[i]=Double.parseDouble(String.valueOf(model.getValueAt(i, 3)));
             nomProd[i]=String.valueOf(model.getValueAt(i, 4));
             idProd[i]=String.valueOf(model.getValueAt(i, 5));
             punit[i]=Double.parseDouble(String.valueOf(model.getValueAt(i, 6)));
             iv=iv+iva[i];
             sub=sub+subt[i];
             }
             
             to=sub+(sub*0.12);
             JOptionPane.showMessageDialog(this,sub+"  "+iv+"  "+to);
      
             
             
             
             String tipo;
                                 switch ((String) model.getValueAt(0, 7)) {
                        case "cedula":
                            tipo = "05";
                            break;
                        case "ruc":
                            tipo = "04";
                            break;
                        case "pasaporte":
                            tipo = "06";
                            break;
                        case "placa":
                            tipo = "09";
                            break;
                        default:
                            tipo = null;
                            break;
                    }
             int idCliente=Integer.parseInt(String.valueOf(model.getValueAt(0, 8)));
             int idUser=Integer.parseInt(String.valueOf(model.getValueAt(0, 9)));
             String nCliente=String.valueOf(tablaResultado.getValueAt(0, 5));
             
             
             
             
             //creo la clave de acceso
             String clave = new crear_clave_acceso().crear_clave_acceso(fechaEmision.replace("/", ""), "04", ruc, ambiente,
             sec1 + sec2, num, "12345678", "1");  
              JOptionPane.showMessageDialog(this, clave);
                        
              java.sql.ResultSet rs = model.stSentencias.executeQuery("SELECT certificado_digital FROM datos_gasolinera");
            rs.next();
            PKCS12_RESOURCE = rs.getBlob(1).getBinaryStream();
                         
              
              notaCredito = new crear_nota_credito_normal1().crear_nota_credito_normal(idProd, nomComercial, contabilidad, contribuyente, ambiente,
                    razon, ruc, clave, sec1, sec2, num, direccion, fechaEmision, tipo, nCliente, idC,
                    subt, iva, tot,nomProd, cantidad, punit, fechaFactura, factura, "ANULACION",to,sub,iv);
                         
                 JOptionPane.showMessageDialog(this, notaCredito+"   "+String.valueOf(subt));         
             
                        if (notaCredito == 1) {
                model.ejecutar("INSERT INTO clave_acceso (clave_acceso, fecha, estado, tipo) VALUES ('" + clave + "', CURDATE(), 1, 'normal')");

                FirmaDigital fd = new FirmaDigital("notas_generadas\\nc" + sec1 + "-" + sec2 + "-" + num + ".xml", "notas_firmadas\\nota_firmada" + sec1 + "-" + sec2 + "-" + num + ".xml");
              JOptionPane.showMessageDialog(this, "nc" + sec1 + "-" + sec2 + "-" + num + ".xml");    

                fd.setPKCS12_RESOURCE(PKCS12_RESOURCE);
                fd.setPKCS12_PASSWORD(PKCS12_PASSWORD);

                fd.firmarDocumentoXML();

                //File xsd = new File("factura_v1.0.0.xsd");
                File temp = new File("notas_firmadas\\nota_firmada" + sec1 + "-" + sec2 + "-" + num + ".xml");

 /**********/  CertificadosSSL.instalarCertificados();
                RespuestaSolicitud response;
                
                ArchivosUtil au=new ArchivosUtil();
                boolean a=au.existeConexion(Ewsri,Awsri);
                
                if(a){
                try {
                    EnvioComprobantesWS ws = new EnvioComprobantesWS(Ewsri);
                    response = ws.enviarComprobante(temp);

                } catch (javax.xml.ws.WebServiceException ex) {
                    EnvioComprobantesWS ws = new EnvioComprobantesWS(Ewsri);
                    response = ws.enviarComprobante(temp);
                }

                //RespuestaSolicitud response = ws.enviarComprobante(new File("D:\\ejemplos\\Firmados\\pruebaguia.xml"));
                System.out.println(response.getEstado());

                System.out.println("---");
                RespuestaSolicitud.Comprobantes comprobantes = response.getComprobantes();
                if (comprobantes != null) {
                    List<Comprobante> listaComprobantes = comprobantes.getComprobante();
                    if (!listaComprobantes.isEmpty()) {
                        for (Comprobante comprobante : listaComprobantes) {
                            List<ec.gob.sri.comprobantes.ws.Mensaje> mensajes = comprobante.getMensajes().getMensaje();
                            for (ec.gob.sri.comprobantes.ws.Mensaje mensaje : mensajes) {
                                System.out.println(mensaje.getIdentificador() + "\t" + mensaje.getMensaje() + "\t" + mensaje.getInformacionAdicional());
                            }
                        }
                    }
                }

                

                if (response.getEstado().equalsIgnoreCase("RECIBIDA")) {
                    System.out.println("autorizando nota de credito " + num);
                    List<Autorizacion> listaAutorizaciones;
                    ec.gob.sri.comprobantes.ws.aut.RespuestaComprobante respuesta;
                    int c = 0;
                    try {
                        respuesta = (new AutorizacionComprobantesWS(Awsri)).llamadaWSAutorizacionInd(clave);
                        listaAutorizaciones = respuesta.getAutorizaciones().getAutorizacion();

                        while (listaAutorizaciones.isEmpty()) {
                            respuesta = (new AutorizacionComprobantesWS(Awsri)).llamadaWSAutorizacionInd(clave);
                            listaAutorizaciones = respuesta.getAutorizaciones().getAutorizacion();
                            System.out.println();
                            c++;
                        }
                    } catch (java.lang.NullPointerException ex) {
                        respuesta = (new AutorizacionComprobantesWS(Awsri)).llamadaWSAutorizacionInd(clave);
                        listaAutorizaciones = respuesta.getAutorizaciones().getAutorizacion();
                        while (listaAutorizaciones.isEmpty()) {
                            respuesta = (new AutorizacionComprobantesWS(Awsri)).llamadaWSAutorizacionInd(clave);
                            listaAutorizaciones = respuesta.getAutorizaciones().getAutorizacion();
                            System.out.println();
                            c++;
                        }
                    }

                    System.out.println("Intentos " + c);
                    System.out.println(listaAutorizaciones.size());

                    for (Autorizacion autorizacion : listaAutorizaciones) {
                        //L√≥gica de acceso a datos
                        String nAuto = autorizacion.getNumeroAutorizacion();
                        XMLGregorianCalendar fAuto = autorizacion.getFechaAutorizacion();
                        //--
                        String estado = autorizacion.getEstado().toUpperCase();
                       System.out.println("entro a autorizacion factura "+estado+" " + num);

                        String ta;
                        FileInputStream in = null;

                        if (estado.compareTo("AUTORIZADO") == 0) {
                            ArchivosUtil.guardarDocumentoXMLAutorizado(autorizacion, "notas_autorizadas\\nota_autorizada" + sec1 + "-" + sec2 + "-" + num + ".xml");

                            ta = (ambiente.equalsIgnoreCase("1") ? "Pruebas" : "Produccion");

                            /*reporte_factura rf = new reporte_factura();
                             rf.reporte_factura(s1 + "-" + s2 + "-" + ss3, r, d, d, ocont, String.valueOf(cespecial), nAuto, String.valueOf(fAuto), cadena, "Normal", ta, rz, nc, ncliente, clientr, f.getText(), "", String.valueOf(subtotal), String.valueOf(iva), String.valueOf(total), "0", codigop, producto, String.valueOf(cantidad), producto, String.valueOf(pu), "0");
                             rf.enviar_email(contramail,maile, "autorizados\\autorizado" + s1 + "-" + s2 + "-" + ss3 + ".xml", "pdf\\" + s1 + "-" + s2 + "-" + ss3 + ".pdf", email, ncliente, rz, s1 + "-" + s2 + "-" + ss3 + ".pdf", s1 + "-" + s2 + "-" + ss3 + ".xml");
                             rf.run();*/
                               JOptionPane.showMessageDialog(this, "autorizado");
                          /* temp = new File("notas_autorizadas\\nota_autorizada" + sec1 + "-" + sec2 + "-" + num + ".xml");
                             model.consulta("SELECT idclave_acceso FROM clave_acceso WHERE clave_acceso = '" + clave + "'");
                            model.ejecutar("INSERT INTO nota_credito (factura_idfactura, factura_cliente_idcliente, factura_usuarios_idusuarios, clave_acceso_idclave_acceso, valor_modificacion, motivo, estado) "
                                    + "VALUES (" + idFactura + ", " + idCliente + ", " + idUser + ", " + model.getValueAt(0, 0) + ", " + tot + ", 'ANULACION', 'AUTORIZADO')");
                            model.psPrepararSentencias = model.coneccion.prepareStatement("INSERT INTO adv_xml.xml_enviados_autorizados (doc_xml, xml_factura) "
                                    + "VALUES(?, '" + idFactura + "')");
                            in = new FileInputStream(temp);
                            model.psPrepararSentencias.setBinaryStream(1, in, (int) temp.length());
                            model.psPrepararSentencias.executeUpdate();
                            model.psPrepararSentencias.close();*/
/*creo la factura nueva*/ 
                               
                                 model.consulta("SELECT numero FROM factura where punto_emision_idpunto_emision="+Integer.parseInt(sec2)+" ORDER BY idfactura DESC LIMIT 1");
                                String nuevo[]=(String.valueOf(model.getValueAt(0, 0))).split("-");
                               String nuevo1=nuevo[2];
                              String ci1=ci.getText();
                              String nombre1=nombre.getText();
                              System.out.println("creando"+nuevo1+" "+sec1+" "+sec2);
  int creaFactura = new crear_factura_credito().crear_factura_credito(metodo,idProd,nomComercial,contabilidad,0,ambiente,razon,ruc,clave,sec1,sec2,nuevo1,direccion,fechaEmision,tipo,nombre1,ci1,sub,iv,to,nomProd,cantidad,punit,iva,tot,subt);

                        } else {
                            int con = 0;
                            String mensajeE = null;
                            List<Mensaje> mensajes = autorizacion.getMensajes().getMensaje();
                            for (Mensaje mensaje : mensajes) {
                                ArchivosUtil.guardarDocumentoXMLAutorizado(autorizacion, "notas_no_autorizados\\" + sec1 + "-" + sec2 + "-" + num + ".xml");
                                temp = new File("notas_no_autorizados\\" + sec1 + "-" + sec2 + "-" + num + ".xml");
                                con++;
                                if (con == 1) {
                                    mensajeE = mensaje.getMensaje();
                                }
                            }
                            //in = new FileInputStream(temp);
                           /* model.ejecutar("INSERT INTO nota_credito (factura_idfactura, factura_cliente_idcliente, factura_usuarios_idusuarios, clave_acceso_idclave_acceso, valor_modificacion, motivo, estado) "
                                    + "VALUES (" + idFactura + ", " + idCliente + ", " + idUser + ", " + Integer.parseInt(num) + ", " + to + ", 'ANULACION', 'estado')");
                            model.ejecutar("UPDATE factura SET Estado_factura = 'ANULADO' "
                                    + "WHERE idFactura = " + idFactura);
                            model.psPrepararSentencias = model.coneccion.prepareStatement("INSERT INTO adv_xml.xml_no_autorizados (doc_xml, xml_factura, motivo_no_autorizado) "
                                    + "VALUES(?, '" + idFactura + "','" + mensajeE + "')");
                            model.psPrepararSentencias.setBinaryStream(1, in, (int) temp.length());
                            model.psPrepararSentencias.executeUpdate();
                            model.psPrepararSentencias.close();*/
                        }
                        //in.close();
                    }
                }else{
                JOptionPane.showMessageDialog(this, response.getEstado());
                
                }
                }else{
                JOptionPane.showMessageDialog(this, "no hay conexxion con el SRI");
                }
            }
             
             
             
// TODO add your handling code here:
         } catch (SQLException ex) {
             Logger.getLogger(buscarFactura.class.getName()).log(Level.SEVERE, null, ex);
         } catch (JAXBException ex) {
             Logger.getLogger(buscarFactura.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(buscarFactura.class.getName()).log(Level.SEVERE, null, ex);
         }
         
         
            // int crearFactura=crear_factura_credito(String tp, String cp, String nc, String oconta, int cest, String ambiente, String rz, String r, String cadena, String s1, String s2, String ss3, String d, String fecha, String ti, String ncliente, String clientr, Double subtotalF, Double ivaF, Double totalF, String [] producto, Double[] cantidad, Double[] pu,Double ivaP[],Double [] totalP,Double [] subtotalP);

         
         numero.setEnabled(true);
         numero.setText("");
}else{
JOptionPane.showMessageDialog(this, "debe ingresar la factura");
}   
    }//GEN-LAST:event_jButton1ActionPerformed

    private void quitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitarActionPerformed
       DefaultTableModel Tabla=(DefaultTableModel) tablaArticulos.getModel();

        int filas=tablaArticulos.getSelectedRow();
Tabla.removeRow(filas);


     // TODO add your handling code here:
    }//GEN-LAST:event_quitarActionPerformed

    private void tablaArticulosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaArticulosKeyPressed
      DefaultTableModel Tabla=(DefaultTableModel) tablaArticulos.getModel();
String k=String.valueOf(evt.getKeyCode());

        int filas=tablaArticulos.getSelectedRow();
       float cant=Float.parseFloat(String.valueOf(tablaArticulos.getValueAt(filas, 0)));          
        int cant1=Math.round(cant);
        double puni=Double.parseDouble(String.valueOf(tablaArticulos.getValueAt(filas, 5)));
        if(k.equals("10")){
            if(cant1==0){
            Tabla.removeRow(filas);
            }else{
        Tabla.setValueAt(cant1*puni, filas  , 1);
        Tabla.setValueAt((cant1*puni)*0.12, filas  , 3);
        Tabla.setValueAt((cant1*puni)+((cant1*puni)*0.12), filas  , 2);
            }

        
        }
        if(k.equals("127")){
        Tabla.removeRow(filas);
        
        }

         
  tablaArticulos.setModel(Tabla);

                 // TODO add your handling code here:
    }//GEN-LAST:event_tablaArticulosKeyPressed
       public void limpiarTabla(JTable tabla){
        //me borra todo lo que esta en la tabla para la nueva escritura
         DefaultTableModel TablaC=(DefaultTableModel) tabla.getModel();
           TableColumn column = null;
            for(int i=0;i<tabla.getRowCount();i++){
                TablaC.removeRow(i);
                i-=1;
            }
            
            for (int i = 0; i < 3; i++) {
	     column = tabla.getColumnModel().getColumn(i);
	     if (i == 0 || i==3) {
	          column.setPreferredWidth(230);
	     }
             else
             {
	          column.setPreferredWidth(100);
	     }
         }
            
    }
    public void busqueda(String cadena,String columna){
        //metodo para realizar las busquedas y que me muestren en las tablas
              if(cadena.length()>4){
          limpiarTabla(tablaCliente);
         try {
                 model = new ConnectionTableDB(usu, contra, "adv_facturacion", "SELECT nombre,cedula_ruc,telefono,email,credito_cliente FROM cliente WHERE "+columna+" LIKE'"+cadena+"%' limit 20", false);               
        
                
         } catch (SQLException ex) {
              Logger.getLogger(buscarFactura.class.getName()).log(Level.SEVERE, null, ex);         
          
          }
         DefaultTableModel TablaC=(DefaultTableModel) tablaCliente.getModel();

         String nom,cedula,telefono,mail;

         int credito;
         filas=model.getRowCount();
         int i=0,j=0;
         while(filas>0){
                      nom=((String)model.getValueAt(i, 0)); 
                      cedula=((String)model.getValueAt(i, 1));
                      telefono=((String)model.getValueAt(i, 2));
                      mail=((String)model.getValueAt(i, 3));

                     TablaC.addRow(new Object[]{nom,cedula,telefono,mail});

                     filas--;
                     i++;

         }      
                 
          
      }
    
    }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Hora;
    private javax.swing.JTextField ci;
    private javax.swing.JTextField hoy;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField nombre;
    private javax.swing.JTextField numero;
    private javax.swing.JMenuItem quitar;
    private javax.swing.JTable tablaArticulos;
    private javax.swing.JTable tablaCliente;
    private javax.swing.JTable tablaResultado;
    // End of variables declaration//GEN-END:variables
}
