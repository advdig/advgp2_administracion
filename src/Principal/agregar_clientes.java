 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.sql.DataSource;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author r
 */
public class agregar_clientes extends javax.swing.JFrame {

    /**
     * Creates new form agregar_clientes
     */
    public String usu, contra;
    private static final int NUM_PROVINCIAS = 24;
    // public static String rucPrueba = â€œ1790011674001â€³;
    private static int[] coeficientes = {4, 3, 2, 7, 6, 5, 4, 3, 2};
    private static int constante = 11;
    String usuario, contraseña, nombre, cedula, codigo;

    public agregar_clientes(String usuario, String contraseña, String nombre, String cedula, String codigo) {

        this.usuario = usuario;
        this.contraseña = contraseña;
        this.nombre = nombre;
        this.cedula = cedula;
        this.codigo = codigo;




        initComponents();
        mapeoTeclas();

        ncliente.setText(nombre);
        ruccliente.setText(cedula);
        ncliente.setText(nombre);
        ccliente.setText(codigo);

        this.setResizable(false);

    }

    public void mapeoTeclas() {

        ActionMap mapaAccion = panel.getActionMap();
        InputMap map = panel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        //F1
        KeyStroke key_F1 = KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0);

        map.put(key_F1, "accion_F1");
        mapaAccion.put("accion_F1", Accion_F1());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ncliente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        dcliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ruccliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tcliente = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        ccliente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        placa = new javax.swing.JTextField();
        cplaca = new javax.swing.JCheckBox();
        cpasaporte = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setForeground(new java.awt.Color(255, 255, 255));
        panel.setLayout(new java.awt.GridLayout(9, 2));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Nombre ");
        panel.add(jLabel1);

        ncliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ncliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nclienteKeyTyped(evt);
            }
        });
        panel.add(ncliente);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Direccion");
        panel.add(jLabel2);

        dcliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        panel.add(dcliente);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("RUC/CED");
        panel.add(jLabel3);

        ruccliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ruccliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rucclienteActionPerformed(evt);
            }
        });
        ruccliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rucclienteKeyTyped(evt);
            }
        });
        panel.add(ruccliente);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Telefono");
        panel.add(jLabel4);

        tcliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tcliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tclienteKeyTyped(evt);
            }
        });
        panel.add(tcliente);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Codigo");
        panel.add(jLabel5);

        ccliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ccliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cclienteKeyTyped(evt);
            }
        });
        panel.add(ccliente);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("E-mail");
        panel.add(jLabel6);

        email.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailKeyTyped(evt);
            }
        });
        panel.add(email);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Placa");
        panel.add(jLabel8);

        placa.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        placa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                placaKeyTyped(evt);
            }
        });
        panel.add(placa);

        cplaca.setBackground(new java.awt.Color(255, 255, 255));
        cplaca.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cplaca.setText("Placa");
        cplaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cplacaActionPerformed(evt);
            }
        });
        panel.add(cplaca);

        cpasaporte.setBackground(new java.awt.Color(255, 255, 255));
        cpasaporte.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cpasaporte.setText("Pasaporte");
        cpasaporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpasaporteActionPerformed(evt);
            }
        });
        panel.add(cpasaporte);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Grabar(F1)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panel.add(jButton1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public AbstractAction Accion_F1() {
        return new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                guardar();
            }
        };
    }
 Connection n;
 private DataSource dataSource;
    public void guardar() {
        try {
         
            
       Conecciones n1 = new Conecciones(usuario, contraseña);
        
         dataSource=n1.ConectarMysql();
         n = dataSource.getConnection();
            int validar = 0;
            int idcliente = 0;
            if (ncliente.getText().length() == 0) {

                JOptionPane.showMessageDialog(this, "se debe ingresar un nombre para el cliente");


            } else if (cplaca.isSelected() || cpasaporte.isSelected()) {

                String ti = "";
                System.out.println("placa");
                if (cplaca.isSelected()) {

                    ti = "placa";

                }
                if (cpasaporte.isSelected()) {

                    ti = "pasaporte";

                }

                try {



                    Statement st2 = n.createStatement();
                    //System.out.println("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`, `placa`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + " ', '0', '" + placa.getText() + "', 'No Autorizado','" + email.getText() + " ', '" + ti + "', '0.00'");

                    st2.executeUpdate("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`, `placa`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText() + "','" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + " ', '0', '" + placa.getText() + "', 'No Autorizado','" + email.getText() + " ', '" + ti + "', '0.00');");

                   

                    JOptionPane.showMessageDialog(this, "Cliente grabado correctamente");
                    this.setVisible(false);

                } catch (SQLException ex) {

                    JOptionPane.showMessageDialog(this, "Placa/Pasaporte ya registrado");
                    Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {

                if (ruccliente.getText().trim().length() == 10) {

                    validar = validarcedula(ruccliente.getText());



                    if (validar == 1) {




                        if (email.getText().length() > 0) {
                            validar = validarEmail(email.getText()) ? 1 : 0;

                            if (validar == 1) {
                                try {

                                    Statement st2 = n.createStatement();

                                    st2.executeUpdate("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`,`placa` ,`estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '0','" + placa.getText() + "', 'No Autorizado', '" + email.getText() + "', 'cedula', '0.00');");




                                    if (ccliente.getText().length() > 0) {

                                        Pattern pat = Pattern.compile("[A-Z|a-z]{2,4}[0-9]{4}");
                                        Matcher mat = pat.matcher(ccliente.getText());
                                        if (mat.matches()) {

                                            Statement st_im1 = n.createStatement();
                                            ResultSet ridim1 = st_im1.executeQuery("SELECT idcliente FROM adv_facturacion.cliente  WHERE cedula_ruc=" + ruccliente.getText() + "");


                                            while (ridim1.next()) {

                                                idcliente = ridim1.getInt(1);


                                            }

                                            Statement st3 = n.createStatement();

                                            st3.executeUpdate("INSERT INTO `adv_facturacion`.`codigos` (`codigo`, `tipo_codigo`, `cliente_idcliente`) VALUES ('" + ccliente.getText() + "', 'codigo', '" + idcliente + "');");


                                        } else {

                                            if (ccliente.getText().length() == 5 | ccliente.getText().length() == 6) {
                                                Pattern pat1 = Pattern.compile("(^[0]{1,5}[1-9]{1,6}$)");
                                                Matcher mat1 = pat1.matcher(ccliente.getText());
                                                if (mat1.matches()) {

                                                    Statement st_im1 = n.createStatement();
                                                    ResultSet ridim1 = st_im1.executeQuery("SELECT idcliente FROM adv_facturacion.cliente  WHERE cedula_ruc=" + ruccliente.getText() + "");


                                                    while (ridim1.next()) {

                                                        idcliente = ridim1.getInt(1);


                                                    }

                                                    Statement st3 = n.createStatement();

                                                    st3.executeUpdate("INSERT INTO `adv_facturacion`.`codigos` (`codigo`, `tipo_codigo`, `cliente_idcliente`) VALUES ('" + ccliente.getText() + "', 'codigo', '" + idcliente + "');");

                                                } else {

                                                    ccliente.setText("");
                                                    JOptionPane.showMessageDialog(this, "Codigo No cumple estructura");


                                                }
                                            } else {

                                                ccliente.setText("");
                                                JOptionPane.showMessageDialog(this, "Codigo No cumple estructura");


                                            }


                                        }





                                    }


                                    // INSERT INTO `adv_facturacion`.`cliente` (`idcliente`, `nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('', 'aaa', 'aaa', '0106582', '2855', '00025', '0', 'NO', 'aaa', 'ruc', '0.00');
                                    JOptionPane.showMessageDialog(this, "Cliente grabado correctamente");
                                    this.setVisible(false);
                                } catch (SQLException ex) {

                                    JOptionPane.showMessageDialog(this, "Ruc/cedula ya registrado");
                                    Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            } else {

                                JOptionPane.showMessageDialog(this, "email ingresado es incorrecto");

                            }
                        } else {
                            try {

                                Statement st2 = n.createStatement();


                                // System.out.println("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '" + ccliente.getText() + "', '0', 'No Autorizado', '" + email.getText() + "', 'cedula', '0.00');");
                                st2.executeUpdate("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`,`placa` ,`estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '0','" + placa.getText() + "', 'No Autorizado', '" + email.getText() + "', 'cedula', '0.00');");




                                if (ccliente.getText().length() > 0) {

                                    Statement st_im1 = n.createStatement();
                                    ResultSet ridim1 = st_im1.executeQuery("SELECT idcliente FROM adv_facturacion.cliente  WHERE cedula_ruc=" + ruccliente.getText() + "");


                                    while (ridim1.next()) {

                                        idcliente = ridim1.getInt(1);


                                    }

                                    Statement st3 = n.createStatement();

                                    st3.executeUpdate("INSERT INTO `adv_facturacion`.`codigos` (`codigo`, `tipo_codigo`, `cliente_idcliente`) VALUES ('" + ccliente.getText() + "', 'codigo', '" + idcliente + "');");
                                }



                                // INSERT INTO `adv_facturacion`.`cliente` (`idcliente`, `nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('', 'aaa', 'aaa', '0106582', '2855', '00025', '0', 'NO', 'aaa', 'ruc', '0.00');
                                JOptionPane.showMessageDialog(this, "Cliente grabado correctamente");
                                this.setVisible(false);
                            } catch (SQLException ex) {

                                JOptionPane.showMessageDialog(this, "Ruc/cedula ya registrado");
                                Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
                            }


                        }





                    } else {

                        JOptionPane.showMessageDialog(this, "cedula ingresada es incorrecta");

                    }






                } else if (ruccliente.getText().trim().length() == 13) {


                    validar = validarrucnatural(ruccliente.getText());

                    if (validar == 1) {

                        if (email.getText().length() > 0) {
                            validar = validarEmail(email.getText()) ? 1 : 0;
                            if (validar == 1) {

                                try {

                                    Statement st2 = n.createStatement();


                                    //System.out.println("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '" + ccliente.getText() + "', '0', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");
                                    st2.executeUpdate("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`,`placa` ,`estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '0','" + placa.getText() + "', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");


                                    if (ccliente.getText().length() > 0) {
                                        Statement st_im1 = n.createStatement();

                                        ResultSet ridim1 = st_im1.executeQuery("SELECT idcliente FROM adv_facturacion.cliente  WHERE cedula_ruc=" + ruccliente.getText() + "");


                                        while (ridim1.next()) {

                                            idcliente = ridim1.getInt(1);


                                        }

                                        Statement st3 = n.createStatement();

                                        st3.executeUpdate("INSERT INTO `adv_facturacion`.`codigos` (`codigo`, `tipo_codigo`, `cliente_idcliente`) VALUES ('" + ccliente.getText() + "', 'codigo', '" + idcliente + "');");

                                    }
                                    // INSERT INTO `adv_facturacion`.`cliente` (`idcliente`, `nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('', 'aaa', 'aaa', '0106582', '2855', '00025', '0', 'NO', 'aaa', 'ruc', '0.00');
                                    JOptionPane.showMessageDialog(this, "Cliente grabado correctamente");
                                    this.setVisible(false);
                                } catch (SQLException ex) {

                                    JOptionPane.showMessageDialog(this, "Ruc/cedula ya registrado");
                                    Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
                                }



                            } else {

                                JOptionPane.showMessageDialog(this, "email ingresado es incorrecto");

                            }
                        } else {

                            try {

                                Statement st2 = n.createStatement();


                                // System.out.println("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '" + ccliente.getText() + "', '0', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");
                                st2.executeUpdate("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`,`placa` ,`estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '0','" + placa.getText() + "', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");

                                if (ccliente.getText().length() > 0) {
                                    Statement st_im1 = n.createStatement();
                                    ResultSet ridim1 = st_im1.executeQuery("SELECT idcliente FROM adv_facturacion.cliente  WHERE cedula_ruc=" + ruccliente.getText() + "");


                                    while (ridim1.next()) {

                                        idcliente = ridim1.getInt(1);


                                    }

                                    Statement st3 = n.createStatement();

                                    st3.executeUpdate("INSERT INTO `adv_facturacion`.`codigos` (`codigo`, `tipo_codigo`, `cliente_idcliente`) VALUES ('" + ccliente.getText() + "', 'codigo', '" + idcliente + "');");
                                }

                                // INSERT INTO `adv_facturacion`.`cliente` (`idcliente`, `nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('', 'aaa', 'aaa', '0106582', '2855', '00025', '0', 'NO', 'aaa', 'ruc', '0.00');
                                JOptionPane.showMessageDialog(this, "Cliente grabado correctamente");
                                this.setVisible(false);
                            } catch (SQLException ex) {

                                JOptionPane.showMessageDialog(this, "Ruc/cedula ya registrado");
                                Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
                            }


                        }

                    } else {


                        System.out.println("Ruc persona juridica ");


                        validar = validarrucjuridica(ruccliente.getText());

                        System.out.println(validar);
                        if (validar == 1) {

                            if (email.getText().length() > 0) {

                                validar = validarEmail(email.getText()) ? 1 : 0;

                                if (validar == 1) {

                                    try {

                                        Statement st2 = n.createStatement();


                                        //  System.out.println("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '" + ccliente.getText() + "', '0', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");
                                        st2.executeUpdate("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`,`placa` ,`estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '0','" + placa.getText() + "', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");

                                        if (ccliente.getText().length() > 0) {
                                            Statement st_im1 = n.createStatement();
                                            ResultSet ridim1 = st_im1.executeQuery("SELECT idcliente FROM adv_facturacion.cliente  WHERE cedula_ruc=" + ruccliente.getText() + "");


                                            while (ridim1.next()) {

                                                idcliente = ridim1.getInt(1);


                                            }

                                            Statement st3 = n.createStatement();

                                            st3.executeUpdate("INSERT INTO `adv_facturacion`.`codigos` (`codigo`, `tipo_codigo`, `cliente_idcliente`) VALUES ('" + ccliente.getText() + "', 'codigo', '" + idcliente + "');");
                                        }

                                        // INSERT INTO `adv_facturacion`.`cliente` (`idcliente`, `nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('', 'aaa', 'aaa', '0106582', '2855', '00025', '0', 'NO', 'aaa', 'ruc', '0.00');
                                        JOptionPane.showMessageDialog(this, "Cliente grabado correctamente");
                                        this.setVisible(false);
                                    } catch (SQLException ex) {

                                        JOptionPane.showMessageDialog(this, "Ruc/cedula ya registrado");
                                        Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                } else {

                                    JOptionPane.showMessageDialog(this, "email ingresado es incorrecta");

                                }
                            } else {

                                Statement st2 = n.createStatement();


                                //  System.out.println("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '" + ccliente.getText() + "', '0', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");
                                st2.executeUpdate("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`,`placa` ,`estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '0','" + placa.getText() + "', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");
                                JOptionPane.showMessageDialog(this, "Cliente grabado correctamente");
                                this.setVisible(false);


                            }

                        } else {

                            validar = validarrucpublicos(ruccliente.getText());

                            if (validar == 1) {


                                if (email.getText().length() > 0) {
                                    validar = validarEmail(email.getText()) ? 1 : 0;
                                    if (validar == 1) {


                                        try {

                                            Statement st2 = n.createStatement();


                                            //System.out.println("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '" + ccliente.getText() + "', '0', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");
                                            st2.executeUpdate("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`,`placa` ,`estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '0','" + placa.getText() + "', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");

                                            if (ccliente.getText().length() > 0) {
                                                Statement st_im1 = n.createStatement();
                                                ResultSet ridim1 = st_im1.executeQuery("SELECT idcliente FROM adv_facturacion.cliente  WHERE cedula_ruc=" + ruccliente.getText() + "");


                                                while (ridim1.next()) {

                                                    idcliente = ridim1.getInt(1);


                                                }

                                                Statement st3 = n.createStatement();

                                                st3.executeUpdate("INSERT INTO `adv_facturacion`.`codigos` (`codigo`, `tipo_codigo`, `cliente_idcliente`) VALUES ('" + ccliente.getText() + "', 'codigo', '" + idcliente + "');");

                                            }
                                            // INSERT INTO `adv_facturacion`.`cliente` (`idcliente`, `nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('', 'aaa', 'aaa', '0106582', '2855', '00025', '0', 'NO', 'aaa', 'ruc', '0.00');
                                            JOptionPane.showMessageDialog(this, "Cliente grabado correctamente");
                                            this.setVisible(false);
                                        } catch (SQLException ex) {

                                            JOptionPane.showMessageDialog(this, "Ruc/cedula ya registrado");
                                            Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
                                        }

                                    } else {

                                        JOptionPane.showMessageDialog(this, "email ingresado es incorrecta");

                                    }
                                } else {
                                    try {

                                        Statement st2 = n.createStatement();


                                        //  System.out.println("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '" + ccliente.getText() + "', '0', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");
                                        st2.executeUpdate("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`,`placa` ,`estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '0','" + placa.getText() + "', 'No Autorizado', '" + email.getText() + "', 'ruc', '0.00');");

                                        if (ccliente.getText().length() > 0) {
                                            Statement st_im1 = n.createStatement();
                                            ResultSet ridim1 = st_im1.executeQuery("SELECT idcliente FROM adv_facturacion.cliente  WHERE cedula_ruc=" + ruccliente.getText() + "");


                                            while (ridim1.next()) {

                                                idcliente = ridim1.getInt(1);


                                            }

                                            Statement st3 = n.createStatement();

                                            st3.executeUpdate("INSERT INTO `adv_facturacion`.`codigos` (`codigo`, `tipo_codigo`, `cliente_idcliente`) VALUES ('" + ccliente.getText() + "', 'codigo', '" + idcliente + "');");
                                        }

                                        // INSERT INTO `adv_facturacion`.`cliente` (`idcliente`, `nombre`, `direccion`, `cedula_ruc`, `telefono`, `codigo`, `credito_cliente`, `estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('', 'aaa', 'aaa', '0106582', '2855', '00025', '0', 'NO', 'aaa', 'ruc', '0.00');
                                        JOptionPane.showMessageDialog(this, "Cliente grabado correctamente");
                                        this.setVisible(false);
                                    } catch (SQLException ex) {

                                        JOptionPane.showMessageDialog(this, "Ruc/cedula ya registrado");
                                        Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
                                    }


                                }



                            } else {

                                JOptionPane.showMessageDialog(this, "error ruc  ingresado es incorrecto");

                            }


                        }



                    }




                } else {

                    JOptionPane.showMessageDialog(this, "error ruc  ingresado es incorrecto");
                }



            }



        } catch (ClassNotFoundException ex) {
            Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(agregar_clientes.class.getName()).log(Level.SEVERE, null, ex);
        }













    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        guardar();


    }//GEN-LAST:event_jButton1ActionPerformed
    private static final String PATTERN_EMAIL = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
            + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

    public static boolean validarEmail(String email) {

        // Compiles the given regular expression into a pattern.
        Pattern pattern = Pattern.compile(PATTERN_EMAIL);

        // Match the given input against this pattern
        Matcher matcher = pattern.matcher(email);

        return matcher.matches();

    }
    private void nclienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nclienteKeyTyped
        String cadena = Character.toString(evt.getKeyChar());
        Pattern p = Pattern.compile("^[a-zA-Záéíóúñ\\s]*$");
        Matcher m = p.matcher(cadena);
        if (!m.find()) {
            evt.consume();
        }
    }//GEN-LAST:event_nclienteKeyTyped

    public void grabar_cliente(String nombre, String di) {
    }

    private void rucclienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rucclienteKeyTyped

        String cadena = "";
        if (cplaca.isSelected()) {


            cadena = ruccliente.getText();
            Pattern p = Pattern.compile("^([a-zA-Z]{0,3}\\d{0,4})$");
            Matcher m = p.matcher(cadena);


            if (m.find()) {
            } else {
                ccliente.setText(cadena);
                placa.setText(cadena);
                ncliente.setText(cadena);
                evt.consume();
            }

        } else if (cpasaporte.isSelected()) {
        } else {

            cadena = ruccliente.getText();
            Pattern p = Pattern.compile("^[0-9]{0,12}$");
            Matcher m = p.matcher(cadena);

            if (m.find()) {
            } else {

                evt.consume();
            }
        }



    }//GEN-LAST:event_rucclienteKeyTyped

    private void tclienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tclienteKeyTyped
        char c = evt.getKeyChar();


        if (Character.isLetter(c)) {
            getToolkit().beep();

            evt.consume();



        }
    }//GEN-LAST:event_tclienteKeyTyped

    private void cclienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cclienteKeyTyped
        char c = evt.getKeyChar();


        if (Character.isLetter(c)) {
            getToolkit().beep();

            evt.consume();



        }

       
        

        


    }//GEN-LAST:event_cclienteKeyTyped

    private void emailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_emailKeyTyped

    private void cplacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cplacaActionPerformed

        if (cplaca.isSelected()) {

            jLabel3.setText("PLACA");



        } else {
            jLabel3.setText("RUC/CED");


        }
    }//GEN-LAST:event_cplacaActionPerformed

    private void placaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_placaKeyTyped
      
    }//GEN-LAST:event_placaKeyTyped

    private void cpasaporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpasaporteActionPerformed
        if (cplaca.isSelected()) {

            jLabel3.setText("PASAPORTE");



        } else {
            jLabel3.setText("RUC/CED");


        }
    }//GEN-LAST:event_cpasaporteActionPerformed

    private void rucclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rucclienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rucclienteActionPerformed

    public int validarcedula(String cedula) {

        int cedulaCorrecta = 0;

        try {

            if (cedula.length() == 10) // ConstantesApp.LongitudCedula
            {
                int tercerDigito = Integer.parseInt(cedula.substring(2, 3));
                if (tercerDigito < 6) {
// Coeficientes de validación cédula
// El decimo digito se lo considera dígito verificador
                    int[] coefValCedula = {2, 1, 2, 1, 2, 1, 2, 1, 2};
                    int verificador = Integer.parseInt(cedula.substring(9, 10));
                    int suma = 0;
                    int digito = 0;
                    for (int i = 0; i < (cedula.length() - 1); i++) {
                        digito = Integer.parseInt(cedula.substring(i, i + 1)) * coefValCedula[i];
                        suma += ((digito % 10) + (digito / 10));
                    }

                    if ((suma % 10 == 0) && (suma % 10 == verificador)) {
                        cedulaCorrecta = 1;
                    } else if ((10 - (suma % 10)) == verificador) {
                        cedulaCorrecta = 1;
                    } else {
                        cedulaCorrecta = 0;
                    }
                } else {
                    cedulaCorrecta = 0;
                }
            } else {
                cedulaCorrecta = 0;
            }
        } catch (NumberFormatException nfe) {
            cedulaCorrecta = 0;
        } catch (Exception err) {
            System.out.println("Una excepcion ocurrio en el proceso de validadcion");
            cedulaCorrecta = 0;
        }

        if (cedulaCorrecta == 0) {
            System.out.println("La Cédula ingresada es Incorrecta");
        }
        return cedulaCorrecta;





    }

    public int validarrucpublicos(String ruc) {




        final int prov = Integer.parseInt(ruc.substring(0, 2));
        int resp = 0;

        if (!((prov > 0) && (prov <= NUM_PROVINCIAS))) {
            resp = 0;
        }

        // boolean val = false;
        Integer v1, v2, v3, v4, v5, v6, v7, v8, v9;
        Integer sumatoria;
        Integer modulo;
        Integer digito;
        int[] d = new int[ruc.length()];

        for (int i = 0; i < d.length; i++) {
            d[i] = Integer.parseInt(ruc.charAt(i) + "");
        }

        v1 = d[0] * 3;
        v2 = d[1] * 2;
        v3 = d[2] * 7;
        v4 = d[3] * 6;
        v5 = d[4] * 5;
        v6 = d[5] * 4;
        v7 = d[6] * 3;
        v8 = d[7] * 2;
        v9 = d[8];

        sumatoria = v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8;
        modulo = sumatoria % 11;
        if (modulo == 0) {
            return 1;
        }
        digito = 11 - modulo;

        if (digito.equals(v9)) {
            resp = 1;
        } else {
            resp = 0;
        }
        return resp;


    }

    public int validarrucjuridica(String ruc) {
        int resp_dato = 0;
        final int prov = Integer.parseInt(ruc.substring(0, 2));
        if (!((prov > 0) && (prov <= NUM_PROVINCIAS))) {
            resp_dato = 0;
        }

        int[] d = new int[10];
        int suma = 0;

        for (int i = 0; i < d.length; i++) {
            d[i] = Integer.parseInt(ruc.charAt(i) + "");
        }

        for (int i = 0; i < d.length - 1; i++) {
            d[i] = d[i] * coeficientes[i];
            suma += d[i];
        }

        int aux, resp;

        aux = suma % constante;
        resp = constante - aux;

        resp = (aux == 0) ? 0 : resp;

        if (resp == d[9]) {
            resp_dato = 1;
        } else {
            resp_dato = 0;
        }
        return resp_dato;



    }

    public int validarrucnatural(String cedula) {

        int isValid = 0;
        if (cedula == null || cedula.length() != 10) {
            isValid = 0;
        }
        final int prov = Integer.parseInt(cedula.substring(0, 2));

        if (!((prov > 0) && (prov <= NUM_PROVINCIAS))) {
            isValid = 0;
        }

        int[] d = new int[10];
        for (int i = 0; i < d.length; i++) {
            d[i] = Integer.parseInt(cedula.charAt(i) + "");
        }

        int imp = 0;
        int par = 0;

        for (int i = 0; i < d.length; i += 2) {
            d[i] = ((d[i] * 2) > 9) ? ((d[i] * 2) - 9) : (d[i] * 2);
            imp += d[i];
        }

        for (int i = 1; i < (d.length - 1); i += 2) {
            par += d[i];
        }

        final int suma = imp + par;

        int d10 = Integer.parseInt(String.valueOf(suma + 10).substring(0, 1)
                + "0")
                - suma;

        d10 = (d10 == 10) ? 0 : d10;

        if (d10 == d[9]) {
            isValid = 1;
        } else {
            isValid = 0;
        }




        return isValid;









    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(agregar_clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(agregar_clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(agregar_clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(agregar_clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ccliente;
    private javax.swing.JCheckBox cpasaporte;
    private javax.swing.JCheckBox cplaca;
    private javax.swing.JTextField dcliente;
    private javax.swing.JTextField email;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField ncliente;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField placa;
    private javax.swing.JTextField ruccliente;
    private javax.swing.JTextField tcliente;
    // End of variables declaration//GEN-END:variables

    public void usuarios(String usuario, String contraseña) {

        contra = contraseña;
        usu = usuario;

    }
}
