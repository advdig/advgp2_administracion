/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;

import conexion.conexion_facturacion;
import java.awt.Component;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
/**
 *
 * @author r
 */
public class Revisar_facturas extends javax.swing.JInternalFrame {

    /**
     * Creates new form Revisar_facturas
     */
    String usuario, contraseña;
    String fechai;
    String fechaf;
    String tdoc;
    String estado;
    String pe, horai, horaf;
    private TableRowSorter<TableModel> sorter;
    DefaultTableModel litabla;

    public Revisar_facturas(String usuario, String contraseña, String fechai, String fechaf, String tdoc, String estado, String pe, String horai, String horaf) {

        this.usuario = usuario;
        this.contraseña = contraseña;
        this.fechai = fechai;
        this.fechaf = fechaf;
        this.tdoc = tdoc;
        this.estado = estado;
        this.pe = pe;
        this.horai = horai;
        this.horaf = horaf;

        initComponents();
        litabla = (DefaultTableModel) facturas.getModel();

//facturas.setModel(litabla);

        /*
         litabla.addColumn("Hora");
         litabla.addColumn("Fecha");
         litabla.addColumn("Numero Doc");
         litabla.addColumn("Tipo de Doc");
         litabla.addColumn("Cliente");
         litabla.addColumn("Cliente Ruc");
         litabla.addColumn("Tipo Doc Aut");
         litabla.addColumn("Manguera");
         litabla.addColumn("Usuario");
         litabla.addColumn("Total");
         litabla.addColumn("Producto");
         litabla.addColumn("Estado Documento");
         litabla.addColumn("Metodo de Pago");
         litabla.addColumn("Placa");
         litabla.addColumn("Factura Afecta");
         */
        //primera suma del total 
        //se añade a la tabla un Listener





    }
    ImageIcon cargando = new ImageIcon("132.gif");

    public void suma() {
        Double total = 0.00;
        //recorrer todas las filas de la segunda columna y va sumando las cantidades
        for (int i = 0; i < facturas.getModel().getRowCount(); i++) {

            Double numero = 0.00;
            try {

                //capturamos valor de celda
                numero = Double.valueOf(facturas.getModel().getValueAt(i, 10).toString());

            } catch (NumberFormatException nfe) { //si existe un error se coloca 0 a la celda
                System.out.println(nfe.getMessage());
                numero = 0.00;
                litabla.setValueAt(0, i, 1);
            }
            //se suma al total
            total += numero;
        }
        //muestra en el componente
        this.total.setText(String.valueOf(total));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ver_factura = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jDialog = new javax.swing.JDialog();
        ubic = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        tabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        facturas = new javax.swing.JTable();
        buscar = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jMenuItem1.setText("Ver Facturas");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        ver_factura.add(jMenuItem1);

        jButton4.setText("Guardar en ../ Save");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(204, 0, 0));
        jButton2.setText("Aceptar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogLayout = new javax.swing.GroupLayout(jDialog.getContentPane());
        jDialog.getContentPane().setLayout(jDialogLayout);
        jDialogLayout.setHorizontalGroup(
            jDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(ubic, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(19, 19, 19))
            .addGroup(jDialogLayout.createSequentialGroup()
                .addGroup(jDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogLayout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel16))
                    .addGroup(jDialogLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogLayout.setVerticalGroup(
            jDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ubic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(198, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tabla.setBackground(new java.awt.Color(255, 255, 255));
        tabla.setLayout(new java.awt.GridLayout(1, 0));

        facturas.setAutoCreateRowSorter(true);
        facturas.setFont(new java.awt.Font("Courier New", 1, 11)); // NOI18N
        facturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hora", "Fecha", "Punto Emision", "Numero Doc", "Tipo Documento", "Nombre Cliente", "DI cliente", "Tipo DI cliente", "Manguera", "Usuario", "Total", "Producto", "Estado Docuemento", "Metodo Pago", "Placa", "Doc Afectado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        facturas.setToolTipText("");
        facturas.setComponentPopupMenu(ver_factura);
        facturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                facturasMouseClicked(evt);
            }
        });
        facturas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                facturasKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                facturasKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(facturas);

        tabla.add(jScrollPane1);

        getContentPane().add(tabla, java.awt.BorderLayout.CENTER);

        buscar.setToolTipText("");
        buscar.setPreferredSize(new java.awt.Dimension(20, 20));
        getContentPane().add(buscar, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.GridLayout(1, 5));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Total Dinero");
        jPanel1.add(jLabel1);
        jPanel1.add(total);

        jButton3.setText("Exportar a exel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jButton1.setText("Exportar Pdf");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String cadena = "";
    int columna;

    private void facturasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_facturasKeyPressed
        System.out.println(evt.getKeyChar());

        if (Character.isDigit(evt.getKeyChar()) || Character.isLetter(evt.getKeyChar()) || evt.getKeyChar() == ' ' || evt.getKeyChar() == '\u0008') {

            switch (evt.getKeyChar()) {
                case '\u0008':

                    cadena = cadena.substring(0, cadena.length() - 1);

                    System.out.println("Backspace");
                    break;
                case '\u007F':

                    cadena = cadena.substring(0, cadena.length() - 1);
                    System.out.println("Delete");
                    break;
                default:
                    cadena = cadena + String.valueOf(evt.getKeyChar());
                    break;
            }

            buscar.setText(cadena);

            /*buscar.setBounds(80,80,100,100);
             /* menu.setLocation(80,80);
             menu.setVisible(true);
             */
            System.out.println(cadena);
            System.out.println(columna);

            RowFilter<TableModel, Object> rf = null;

            try {

                rf = RowFilter.regexFilter("(?i)" + buscar.getText(), columna);

            } catch (java.util.regex.PatternSyntaxException e) {

                Logger.getLogger(enviar_facturas_contingencia.class.getName()).log(Level.SEVERE, null, e);

            }
            sorter.setRowFilter(rf);

            facturas.setRowSorter(sorter);

        }

        suma();
    }//GEN-LAST:event_facturasKeyPressed

    private void facturasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_facturasKeyTyped
    }//GEN-LAST:event_facturasKeyTyped

    private void facturasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facturasMouseClicked
        // TODO add your handling code here:
        columna = facturas.getSelectedColumn();
        cadena = "";
    }//GEN-LAST:event_facturasMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            int[] s = facturas.getSelectedRows();

            int ns = facturas.getSelectedRowCount();

            conexion_facturacion n = new conexion_facturacion(usuario, contraseña);
            n.conectar();

            if (tdoc.equalsIgnoreCase("Factura")) {

                
                System.out.println("numero "+facturas.getValueAt(facturas.getSelectedRow(), 3));
                
                //int id = Integer.parseInt(String.valueOf(facturas.getValueAt(facturas.getSelectedRow(), 0)));
                String factura = String.valueOf(facturas.getValueAt(facturas.getSelectedRow(), 3));

                ResultSet consultan = n.consulta("select idfactura from factura,punto_emision where CAST(SUBSTRING(numero,9)  AS DECIMAL(10))='" + factura + "' and punto_emision_idpunto_emision=idpunto_emision and s2='" + String.valueOf(facturas.getValueAt(facturas.getSelectedRow(), 2)) + "'");

                System.out.println("select idfactura from factura where  CAST(SUBSTRING(numero,9)  AS DECIMAL(10))='" + factura + "'");

                int manguera;
               System.out.println(facturas.getValueAt(facturas.getSelectedRow(), 8));
                manguera = (int) (facturas.getValueAt(facturas.getSelectedRow(), 8));
                 System.out.println(factura);
                
                if (consultan.first()) {

                    VisualizarFactura vf = new VisualizarFactura(usuario, contraseña, consultan.getInt(1), manguera);
                    vf.setVisible(true);
                     System.out.println("entro");
                }

                //generar(id, factura, fecha, cliente_ruc, ncliente);
              

            } else if (tdoc.equalsIgnoreCase("Pagare")) {

                String pagare = String.valueOf(facturas.getValueAt(facturas.getSelectedRow(), 3));

                Pagare p = new Pagare(usuario, contraseña, pagare);

                p.setVisible(true);

            } else if (tdoc.equalsIgnoreCase("nota de credito")) {

                String pe = "050";

                //int id = Integer.parseInt(String.valueOf(facturas.getValueAt(facturas.getSelectedRow(), 0)));
                String nota = String.valueOf(facturas.getValueAt(facturas.getSelectedRow(), 3));
                //nota = nota.split("-")[2];
                ResultSet consultan = n.consulta("select idnota_credito from nota_credito,punto_emision where CAST(SUBSTRING(numero,9)  AS DECIMAL(10))='" + nota + "' and punto_emision_idpunto_emision=idpunto_emision and s2='" + String.valueOf(facturas.getValueAt(facturas.getSelectedRow(), 2)) + "'");

                System.out.println("select idnota_credito from nota_credito,punto_emision where CAST(SUBSTRING(numero,9)  AS DECIMAL(10))='" + nota + "' and punto_emision_idpunto_emision=idpunto_emision and s2='" + pe + "'");

                int manguera;
                //System.out.println(facturas.getValueAt(facturas.getSelectedRow(), 6));
                manguera = (int) (facturas.getValueAt(facturas.getSelectedRow(), 8));

                if (consultan.first()) {

                    VisualizarNotaCredito vf = new VisualizarNotaCredito(usuario, contraseña, consultan.getInt(1), manguera);
                    vf.setVisible(true);

                }

                //generar(id, factura, fecha, cliente_ruc, ncliente);
                System.out.println(nota);

                // JOptionPane.showMessageDialog(this, "nota de credito");
            }else if (tdoc.equalsIgnoreCase("Despacho")) {

                String pagare = String.valueOf(facturas.getValueAt(facturas.getSelectedRow(), 3));

                Pagare p = new Pagare(usuario, contraseña, pagare);

                p.setVisible(true);

            }
          
            //
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Revisar_facturas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Revisar_facturas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        JFileChooser dialog = new JFileChooser();
        int opcion = dialog.showSaveDialog(this);

        if (opcion == JFileChooser.APPROVE_OPTION) {

            File dir = dialog.getSelectedFile();
            String fl = dir.toString();

            ubic.setText(fl);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            List<JTable> tb = new ArrayList<JTable>();
            tb.add(facturas);
            //-------------------
            export_excel excelExporter = new export_excel(tb, new File(ubic.getText() + ".xls"));
            if (excelExporter.export()) {
                JOptionPane.showMessageDialog(null, "TABLAS EXPORTADOS CON EXITOS!");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        llama_excel();
        jDialog.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        javax.swing.filechooser.FileNameExtensionFilter filterXls = new javax.swing.filechooser.FileNameExtensionFilter("Documentos MS Excel 95/2003", "xls");

        //instanciamos una ventana de seleccion de archivo
        final JFileChooser fc = new JFileChooser();

        //agregamos el filtro al filechooser
        fc.setFileFilter(filterXls);

        //capturamos la respuesta del usuario
        int returnVal = fc.showSaveDialog(null);

        //definimos el comportamiento de la ventana
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (returnVal == JFileChooser.APPROVE_OPTION) {

            FileOutputStream fileOut = null;
            File fileXLS = null;
            try {
                //Creamos un objeto archivo con la ruta seleccionada
                fileXLS = fc.getSelectedFile();

                //Validamos si en la ruta el archivo se ha especificado la extensión
                String name = fileXLS.getName();
                if (name.indexOf('.') == -1) {
                    //De no ser asi le agregamos
                    name += ".xls";
                    fileXLS = new File(fileXLS.getParentFile(), name);
                }
                fileOut = new FileOutputStream(fileXLS);
                //Creamos la cabecera

                final String[] headers = {"Hora", "Fecha","Punto","Numero Doc", "Tipo Doc", "Cliente", "Cliente DI","TIPO di cliente", "Manguera", "Usuario", "Total", "Producto", "Estado", "Metodo Pago", "Placa","DOC afectado"};

                //Creamos el libro Excel
                HSSFWorkbook wb = new HSSFWorkbook();
                //Creamos una nueva Hoja
                HSSFSheet sheet = wb.createSheet("PAGARES");

                //Definimos el estilo de la cabecera
                CellStyle headerStyle = wb.createCellStyle();
                //Color de fondo
                headerStyle.setFillBackgroundColor(IndexedColors.GREY_40_PERCENT.getIndex());
                //Estilo de la fuente

                //Alineacion Horizontal
                headerStyle.setAlignment(CellStyle.ALIGN_CENTER);
                // Creamos una fila, las filas empiezan en 0
                Row titleRow = sheet.createRow((short) 0);
                //Creamos una celda para nuestra fila
                org.apache.poi.ss.usermodel.Cell hCell = titleRow.createCell((short) 0);
                //Asignamos un valor a la celda
                hCell.setCellValue("Reporte de Documentos");
                //Vamos a unir nuestra celdas de la primera fila
                sheet.addMergedRegion(new CellRangeAddress(
                        0, //first row (0-based)
                        0, //last row  (0-based)
                        0, //first column (0-based)
                        headers.length - 1 //last column  (0-based)
                        ));
                //Asignamos el estilo que deseamos
                hCell.setCellStyle(headerStyle);
                //Creamos una nueva fila para las cabeceras
                Row row = sheet.createRow((short) 1);
                /**
                 * Creamos nuestras celdas de acuerdo a nuestro array headers
                 * Por cada cabecera creamos una celda y le asignamos el estilo.
                 */
                for (int i = 0; i < headers.length; i++) {
                    org.apache.poi.ss.usermodel.Cell cell = row.createCell(i);
                    cell.setCellValue(headers[i]);
                    cell.setCellStyle(headerStyle);
                    //Asigna automaticamente el tamaño
                    sheet.autoSizeColumn(i);
                }
                /**
                 * Variable para saber en que fila estamos, se inicializa en 2
                 * porque ya hemos creado 2 filas antes.
                 */
                int rowIndex = 2;
                //Recorremos los objetos Producto que tiene nuestra tabla

                for (int j = 0; j < facturas.getRowCount(); j++) {
                    Row newRow = sheet.createRow((short) rowIndex);

                    for (int i = 0; i < facturas.getColumnCount(); i++) {

                        Object objeto = facturas.getValueAt(j, i);

                        System.out.println(objeto);
                        System.out.println(rowIndex);
                        //Por cada objeto creamos una fila             

                        //Creamos una celda por cada campo de nuestro objeto
                        if (i == 2 || i == 6) {

                            newRow.createCell(i).setCellValue((String.valueOf(objeto)));

                        } else if (i == 10) {

                            newRow.createCell(i).setCellValue(Double.parseDouble(String.valueOf(objeto)));

                        } else {

                            newRow.createCell(i).setCellValue(String.valueOf(objeto));
                        }
                        /*
                         Aumentamos nuestra variable de manera que en la siguiente iteracion salta a otra fila
                         */

                    }
                    rowIndex++;

                }

                for (int i = 0; i < headers.length; i++) {
                    sheet.autoSizeColumn(i);
                }
                // Escribimos el libro
                wb.write(fileOut);
            } catch (IOException ex) {
                Logger.getLogger(Revisar_facturas.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    //Cerramos nuestro archivo
                    fileOut.close();
                    //abrimos el archivo generado con el programa correspondiente
                    if (System.getProperty("os.name").equals("Linux")) {
                        Runtime.getRuntime().exec("libreoffice " + fileXLS.getAbsolutePath());
                    } else {
                        Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + fileXLS.getAbsolutePath());
                    }

                } catch (IOException ex) {
                    Logger.getLogger(Revisar_facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        /* jDialog.setLocationRelativeTo(this);
         //La hacemos modal
         jDialog.setModal(true);
         //Establecemos dimensiones.
         jDialog.setMinimumSize(new Dimension(393, 190));
         //Establecemos un título para el jDialog
         jDialog.setTitle("Imprimir en Excel");
         //La hacemos visible.
         jDialog.setVisible(true);*/
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            
            JRTableModelDataSource jrtmd = new JRTableModelDataSource( facturas.getModel() ); 
          
            Map p = new HashMap(); 
            
            
             JasperReport report = JasperCompileManager.compileReport("Facturas.jrxml");
            JasperPrint print = JasperFillManager.fillReport(report, p, jrtmd);
            
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(report,p, jrtmd); 
       
            JasperViewer.viewReport(jasperPrint, false);
        } catch (JRException ex) {
            Logger.getLogger(Revisar_facturas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    public void llama_excel() {
        try {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + ubic.getText() + ".xls");
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Revisar_facturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Revisar_facturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Revisar_facturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Revisar_facturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new Revisar_facturas("root","manager").setVisible(true);
            }
        });
    }

    public void llenar() {

        try {
            String nombre = "";
            conexion_facturacion n = new conexion_facturacion(usuario, contraseña);
            n.conectar();

            if (tdoc.equalsIgnoreCase("Factura")) {
                nombre = "SELECT\n"
                        + "     factura.`hora` AS factura_hora,\n"
                        + "     factura.`fecha` AS factura_fecha,\n"
                        + "     s2,\n"
                        + "     CAST(SUBSTRING(numero,9)  AS DECIMAL(10)),\n"
                        + "	 'Factura',     \n"
                        + "     cliente.`nombre` AS cliente_nombre,\n"
                        + "     cliente.`cedula_ruc` AS cliente_cedula_ruc,\n"
                        + "     cliente.`tipo_identificacion` AS cliente_tipo_identificacion,\n"
                        + "     configuracion.`nmanguera` AS configuracion_nmanguera,\n"
                        + "     usuarios.`nombre` AS usuarios_nombre,\n"
                        + "     factura.`total` AS factura_total,\n"
                        + "     producto.`nombre` AS producto_nombre,\n"
                        + "     factura.`Estado_factura` AS factura_Estado_factura,\n"
                        + "     factura.`metodo_pago` AS factura_metodo_pago,\n"
                        + "     IFNULL((select codigo from codigos,cliente where idcliente=cliente_idcliente and cedula_ruc=cliente_cedula_ruc limit 1),' '),''\n"
                        + "FROM\n"
                        + "     `cliente` cliente INNER JOIN `factura` factura ON cliente.`idcliente` = factura.`cliente_idcliente`\n"
                        + "     INNER JOIN `usuarios` usuarios ON factura.`usuarios_idusuarios` = usuarios.`idusuarios`\n"
                        + "     INNER JOIN `factura_detalle` factura_detalle ON factura.`idfactura` = factura_detalle.`factura_idfactura`\n"
                        + "     INNER JOIN `punto_emision` punto_emision ON factura.`punto_emision_idpunto_emision` = punto_emision.`idpunto_emision`\n"
                        + "     AND punto_emision.`datos_gasolinera_iddatos_gasolinera` = factura.`datos_gasolinera_iddatos_gasolinera`\n"
                        + "     INNER JOIN `configuracion` configuracion ON factura_detalle.`configuracion_nmanguera` = configuracion.`nmanguera`\n"
                        + "     INNER JOIN `producto` producto ON factura_detalle.`producto_idproducto` = producto.`idproducto`\n"
                        + "     where (CONVERT(concat_ws(' ', fecha, hora),DATETIME) >= CONVERT('" + fechai + " " + horai + "',DATETIME) and CONVERT(concat_ws(' ', fecha, hora),DATETIME) <= CONVERT('" + fechaf + " " + horaf + "',DATETIME))  and s2 in " + pe + " and Estado_factura in " + estado + "  group by idfactura ";

            } else if (tdoc.equalsIgnoreCase("Nota de Credito")) {

                nombre = "SELECT\n"
                        + "     nota_credito.`hora` AS nota_credito_hora,\n"
                        + "     nota_credito.`fecha` AS nota_credito_fecha,\n"
                        + "     s2,\n"
                        + "     CAST(SUBSTRING(nota_credito.numero,9)  AS DECIMAL(10)),\n"
                        + "     'Nota Credito' AS cliente_nombre,\n"
                        + "     cliente.`nombre` AS cliente_nombre,\n"
                        + "     cliente.`cedula_ruc` AS cliente_cedula_ruc,\n"
                        + "     cliente.`tipo_identificacion` AS cliente_tipo_identificacion,\n"
                        + "     configuracion.`nmanguera` AS configuracion_nmanguera,\n"
                        + "     usuarios.`nombre` AS usuarios_nombre,\n"
                        + "     nota_credito.`valor_modificacion` AS nota_credito_valor_modificacion,\n"
                        + "     producto.`nombre` AS producto_nombre,\n"
                        + "     nota_credito.`estado` AS nota_credito_estado,\n"
                        + "    factura.metodo_pago AS codigos_codigo,\n"
                        + "    IFNULL((select codigo from codigos,cliente where idcliente=cliente_idcliente and cedula_ruc=cliente_cedula_ruc limit 1),' ') AS codigos_codigo,\n"
                        + "     factura.`numero` AS factura_numero\n"
                        + "FROM\n"
                        + "     `nota_credito` nota_credito INNER JOIN `nota_credito_detalle` nota_credito_detalle ON nota_credito.`idnota_credito` = nota_credito_detalle.`nota_credito_idnota_credito`\n"
                        + "     INNER JOIN `usuarios` usuarios ON nota_credito.`usuarios_idusuarios` = usuarios.`idusuarios`\n"
                        + "     INNER JOIN `factura` factura ON nota_credito.`factura_idfactura` = factura.`idfactura`\n"
                        + "     AND factura.`cliente_idcliente` = nota_credito.`factura_cliente_idcliente`\n"
                        + "     INNER JOIN `cliente` cliente ON factura.`cliente_idcliente` = cliente.`idcliente`\n"
                        + "     INNER JOIN `factura_detalle` factura_detalle ON factura.`idfactura` = factura_detalle.`factura_idfactura`\n"
                        + "     INNER JOIN `configuracion` configuracion ON factura_detalle.`configuracion_nmanguera` = configuracion.`nmanguera`\n"
                        +"      INNER JOIN `punto_emision` punto_emision ON nota_credito.`punto_emision_idpunto_emision` = punto_emision.`idpunto_emision`\n"
                        + "     INNER JOIN `producto` producto ON nota_credito_detalle.`producto_idproducto` = producto.`idproducto`\n"
                        + "     where (nota_credito.fecha between '" + fechai + "' and '" + fechaf + "') and nota_credito.estado in " + estado + " group by nota_credito.numero";

            } else if (tdoc.equalsIgnoreCase("Pagare")) {

                nombre = "SELECT\n"
                        + "     pagare.hora, "
                        + "     pagare.`fecha` AS pagare_fecha,\n"
                        + "     '1' as punto,\n"
                        + "     pagare.`idpagare` AS pagare_idpagare,\n"
                        + "    'Pagare' AS pagare_idpagare,\n"
                        + "     cliente.`nombre` AS cliente_nombre,\n"
                        + "     cliente.`cedula_ruc` AS cliente_cedula_ruc,\n"
                        + "     cliente.`tipo_identificacion` AS cliente_cedula_ruc,\n"
                        + "     pagare.`configuracion_nmanguera` AS pagare_configuracion_nmanguera,\n"
                        + "     usuarios.`usuario` AS usuarios_usuario,\n"
                        + "     pagare.`total` AS pagare_total,\n"
                        + "     producto.`nombre` AS producto_nombre,\n"
                        + "     if(pagare.`facturado`=1,'Facturado','No Facturado') AS pagare_facturado,\n"
                        + "	 'Credito',pagare.placa "
                        + "	,CAST(SUBSTRING(numero,9)  AS DECIMAL(10)) "
                        + "FROM\n"
                        + "     `cliente` cliente INNER JOIN `pagare` pagare ON cliente.`idcliente` = pagare.`cliente_idcliente`\n"
                        + "     INNER JOIN `usuarios` usuarios ON pagare.`usuarios_idusuarios` = usuarios.`idusuarios`\n"
                        + "     INNER JOIN `configuracion` configuracion ON pagare.`configuracion_nmanguera` = configuracion.`nmanguera`\n"
                        + "     INNER JOIN `factura` factura ON pagare.`factura_idfactura` = factura.`idfactura`\n"
                        + "     INNER JOIN `producto` producto ON configuracion.`producto_idproducto` = producto.`idproducto` "
                        + "     where (CONVERT(concat_ws(' ', pagare.fecha, pagare.hora),DATETIME) >= CONVERT('" + fechai + " " + horai + "',DATETIME) and CONVERT(concat_ws(' ', pagare.fecha, pagare.hora),DATETIME) <= CONVERT('" + fechaf + " " + horaf + "',DATETIME))  group by idpagare order by pagare.fecha";

            }else if (tdoc.equalsIgnoreCase("Despacho")) {

                nombre = "SELECT\n"
                        + "     pagare.hora, "
                        + "     pagare.`fecha` AS pagare_fecha,\n"
                        + "     '1' as punto,\n"
                        + "     pagare.`idpagare` AS pagare_idpagare,\n"
                        + "    'Despacho' AS pagare_idpagare,\n"
                        + "     cliente.`nombre` AS cliente_nombre,\n"
                        + "     cliente.`cedula_ruc` AS cliente_cedula_ruc,\n"
                        + "     cliente.`tipo_identificacion` AS cliente_cedula_ruc,\n"
                        + "     pagare.`configuracion_nmanguera` AS pagare_configuracion_nmanguera,\n"
                        + "     usuarios.`usuario` AS usuarios_usuario,\n"
                        + "     pagare.`total` AS pagare_total,\n"
                        + "     producto.`nombre` AS producto_nombre,\n"
                        + "     if(pagare.`facturado`=1,'Facturado','No Facturado') AS pagare_facturado,\n"
                        + "	 'Credito',pagare.placa "
                        + "	,' ' "
                        + "FROM\n"
                         + "     `cliente` cliente INNER JOIN `pagare` pagare ON cliente.`idcliente` = pagare.`cliente_idcliente`\n"
                        + "     INNER JOIN `usuarios` usuarios ON pagare.`usuarios_idusuarios` = usuarios.`idusuarios`\n"
                        + "     INNER JOIN `configuracion` configuracion ON pagare.`configuracion_nmanguera` = configuracion.`nmanguera`\n"
                        + "     INNER JOIN `producto` producto ON configuracion.`producto_idproducto` = producto.`idproducto` "
                        + "     left OUTER  JOIN `credito_cliente` credito_cliente ON cliente.`idcliente` = credito_cliente.`cliente_idcliente`   "
                        + "     where credito_cliente.cupo_cliente is null and credito_cliente=1 and (CONVERT(concat_ws(' ', pagare.fecha, pagare.hora),DATETIME) >= CONVERT('" + fechai + " " + horai + "',DATETIME) and CONVERT(concat_ws(' ', pagare.fecha, pagare.hora),DATETIME) <= CONVERT('" + fechaf + " " + horaf + "',DATETIME))  group by idpagare order by pagare.fecha";

            }

            System.out.println(nombre);

            ResultSet consultan = n.consulta(nombre);

            Object datos[] = new Object[16];

            while (consultan.next()) {
                for (int i = 0; i < 16; i++) {

                    


                    Object[][] row = new Object[][]{{"000004"}, {"processing","rendering pdf","rendering afp","rendering postscript"}};

                    final DefaultMutableTreeNode statusRoot = new DefaultMutableTreeNode((String) row[1][0]);

                    final DefaultTreeModel statusTreeModel = new DefaultTreeModel(statusRoot);

                    final JTree statusTree = new JTree(statusTreeModel);

                    if (row[1].length > 1) {
                        initStatusTree(statusRoot, Arrays.copyOfRange(row[1], 1, row[1].length, String[].class));
                    }
                    
                    
                    

                    //datos[16]=statusTree;
                    datos[i] = consultan.getObject(i + 1);


                    /*
                     if (tdoc.equalsIgnoreCase("Pagare")){
                    
                     }else{
                    
                     Statement st_im2 = n.coneccion.createStatement();
                     ResultSet ridim2 = st_im2.executeQuery("SELECT codigo FROM adv_facturacion.codigos,cliente where cliente_idcliente=idcliente and cedula_ruc='"+consultan.getString(6)+"' limit 1;");
                     if(ridim2.first()){
                    
                     datos[13]=ridim2.getString(1);
                    
                     }
                     
                     System.out.println("dato"+datos[13]);
                    
                    
                     }
                     */
                    //datos[i] = consultac.getObject(i + 1);
                }
                litabla.addRow(datos);
            }

            if (tdoc.equalsIgnoreCase("Pagare")) {

                nombre = "SELECT\n"
                        + "   \n"
                        + "     pagare.hora, "
                        + "     pagare.`fecha` AS pagare_fecha,\n"
                        + "    '1' AS punto,\n"
                        + "     pagare.`idpagare` AS pagare_idpagare,\n"
                        + "    'Pagare' AS pagare_idpagare,\n"
                        + "     cliente.`nombre` AS cliente_nombre,\n"
                        + "     cliente.`cedula_ruc` AS cliente_cedula_ruc,\n"
                        + "     cliente.`tipo_identificacion` AS cliente_cedula_ruc,\n"
                        + "     pagare.`configuracion_nmanguera` AS pagare_configuracion_nmanguera,\n"
                        + "     usuarios.`usuario` AS usuarios_usuario,\n"
                        + "     pagare.`total` AS pagare_total,\n"
                        + "     producto.`nombre` AS producto_nombre,\n"
                        + "     if(pagare.`facturado`=1,'Facturado','No Facturado') AS pagare_facturado,\n"
                        + "	 'Credito',pagare.placa "
                        + "	,' '"
                        + "FROM\n"
                        + "     `cliente` cliente INNER JOIN `pagare` pagare ON cliente.`idcliente` = pagare.`cliente_idcliente`\n"
                        + "     INNER JOIN `usuarios` usuarios ON pagare.`usuarios_idusuarios` = usuarios.`idusuarios`\n"
                        + "     INNER JOIN `configuracion` configuracion ON pagare.`configuracion_nmanguera` = configuracion.`nmanguera`\n"
                        + "     INNER JOIN `producto` producto ON configuracion.`producto_idproducto` = producto.`idproducto` "
                        + "     where (CONVERT(concat_ws(' ', pagare.fecha, pagare.hora),DATETIME) >= CONVERT('" + fechai + " " + horai + "',DATETIME) and CONVERT(concat_ws(' ', pagare.fecha, pagare.hora),DATETIME) <= CONVERT('" + fechaf + " " + horaf + "',DATETIME))  and facturado=0  group by idpagare order by pagare.fecha";

                ResultSet consultan2 = n.consulta(nombre);

                Object datos1[] = new Object[14];

                while (consultan2.next()) {
                    for (int i = 0; i < 14; i++) {

                        datos1[i] = consultan2.getObject(i + 1);

                        //datos[i] = consultac.getObject(i + 1);
                    }
                    litabla.addRow(datos1);
                }

            }

            n.coneccion.close();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(enviar_facturas_contingencia.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(enviar_facturas_contingencia.class.getName()).log(Level.SEVERE, null, ex);
        }

        //facturas.setModel(litabla);
        sorter = new TableRowSorter<TableModel>(litabla);

    }

    public class MiModelo extends DefaultTableModel {

        @Override
        public boolean isCellEditable(int row, int column) {

            return false;

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField buscar;
    private javax.swing.JTable facturas;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JDialog jDialog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel tabla;
    private javax.swing.JTextField total;
    private javax.swing.JTextField ubic;
    private javax.swing.JPopupMenu ver_factura;
    // End of variables declaration//GEN-END:variables

    private void startTask(Object[][] row) {
    }

    private void initStatusTree(DefaultMutableTreeNode root, String[] statusList) {
        for (String s : statusList) {
            root.add(new DefaultMutableTreeNode(s));
        }
    }
}

class TableCellSelectionListener implements ListSelectionListener {

    private JTable _t;

    public TableCellSelectionListener(JTable t) {
        _t = t;
    }

    @Override
    public void valueChanged(ListSelectionEvent arg0) {
        int rowSelected = _t.getSelectedRow();
        int colSelected = _t.getSelectedColumn();
        if (rowSelected > -1 && colSelected > -1) {
            System.out.println("Row selected: " + rowSelected);
            System.out.println("Column selected: " + colSelected);
            TableCellRenderer renderer = _t.getCellRenderer(rowSelected, colSelected);
            Object obj = _t.getValueAt(rowSelected, colSelected);
            Component c = renderer.getTableCellRendererComponent(_t, obj, false, false, rowSelected, colSelected);
            if (c instanceof JTree) {
                TreePath path = ((JTree) c).getPathForRow(0);
                System.out.println("Path expanded: " + ((JTree) c).isExpanded(path));
                if (((JTree) c).isExpanded(path)) {
                    ((JTree) c).collapsePath(path);
                    ((JTree) c).fireTreeCollapsed(path);
                } else {
                    ((JTree) c).expandPath(path);
                    ((JTree) c).fireTreeExpanded(path);
                }
                System.out.println("Path expanded: " + ((JTree) c).isExpanded(path));
                _t.setRowHeight(rowSelected, c.getPreferredSize().height + 50);
                ((DefaultTableModel) _t.getModel()).fireTableDataChanged();
            }
        }
    }
}

@SuppressWarnings("serial")
class JTableJTreeRenderer extends DefaultTableCellRenderer {

    private JTree tree = new JTree();
    private TreeCellRenderer renderer = new DefaultTreeCellRenderer();

    public JTableJTreeRenderer() {
        tree.setCellRenderer(renderer);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        //Using the Renderers JTree was the mistake    
        //tree.setModel(((JTree) value).getModel());
        tree = (JTree) value;
        table.setRowHeight(row, tree.getPreferredSize().height + 50);
        return tree;
    }
}