package Principal;

import conexion.ConnectionTableDB;
import java.awt.Color;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Adv
 */
public class agregarArticulo extends javax.swing.JFrame {

    public String usu = "", contra = "", ip;
    ConnectionTableDB model, model2;

    /**
     * Creates new form agregarArticulo
     */
    public agregarArticulo(String user, String password, String vend, String codigoVend) {
        initComponents();
        usu = user;
        contra = password;

        try {
            model = new ConnectionTableDB(usu, contra, "adv_facturacion", "SELECT tipo_producto from tipo_producto", false);

            for (int i = 0; i < model.getRowCount(); i++) {
                tipo.addItem(String.valueOf(model.getValueAt(i, 0)));
            }
            //this.getContentPane().setBackground(Color.white);
        } catch (SQLException ex) {
            Logger.getLogger(agregarArticulo.class.getName()).log(Level.SEVERE, null, ex);
        }
        model.desconectar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cod = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Sact = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        desc = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Smax = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        agregar = new javax.swing.JButton();
        Smin = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        unitario = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tipo = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Articulo Nuevo");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codActionPerformed(evt);
            }
        });
        getContentPane().add(cod, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 105, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Ingrese el Codigo");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Stock Minimo");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, -1, -1));

        Sact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SactActionPerformed(evt);
            }
        });
        getContentPane().add(Sact, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 105, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Stock Actual");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));

        desc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descActionPerformed(evt);
            }
        });
        getContentPane().add(desc, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 260, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Descripcion");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        Smax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmaxActionPerformed(evt);
            }
        });
        getContentPane().add(Smax, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 105, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Tipo");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        agregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/ico_carro.png"))); // NOI18N
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });
        getContentPane().add(agregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 330, 80, -1));

        Smin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SminActionPerformed(evt);
            }
        });
        getContentPane().add(Smin, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 220, 105, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Precio Unitario");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        unitario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitarioActionPerformed(evt);
            }
        });
        getContentPane().add(unitario, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 105, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("AGREGAR");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 350, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Stock Maximo");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione el Tipo" }));
        tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoActionPerformed(evt);
            }
        });
        getContentPane().add(tipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 150, 190, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codActionPerformed
        desc.requestFocus();  // TODO add your handling code here:
    }//GEN-LAST:event_codActionPerformed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        String descr = "";
        String codigo = "";
        int a = 0, max = 0, min = 0;
        double unit = 0;
        descr = desc.getText();
        if (!descr.equals("")) {
            try {

                codigo = cod.getText();

                try {
                    unit = Double.parseDouble(unitario.getText());
                    try {
                        max = Integer.parseInt(Smax.getText());
                        try {
                            min = Integer.parseInt(Smin.getText());
                            try {
                                a = Integer.parseInt(Sact.getText());

                                if (max > min) {
                                    if (max > a) {
                                        Conecciones he = new Conecciones(usu, contra);
                                        try {
                                           
                                            if (tipo.getSelectedIndex() != 0) {

                                                try {
                                                    
                                                     he.conectar();
                                                   
                                                    System.out.println("ingresando a la base");
                                                    model = new ConnectionTableDB(usu, contra, "adv_facturacion", "SELECT idproducto from producto order by idproducto desc limit 1", false);
                                                    int id = Integer.parseInt(model.getValueAt(0, 0).toString());
                                                    model.consulta("select idtipo_producto from tipo_producto where tipo_producto ='" + tipo.getSelectedItem().toString() + "'");
                                                    int tip = Integer.parseInt(String.valueOf(model.getValueAt(0, 0)));
                                                    id = id + 1;
                                                    System.out.println("INSERT INTO producto(idproducto,nombre,punit,nivel_precio,stock_minimo,stock_maximo,stock_actual,descuento,codigo_barra,tipo_producto_idtipo_producto,precio_sin_iva) VALUES (" + id + ",'" + descr + "'," + unit + ",1," + min + "," + max + "," + a + ",0,'" + codigo + "'," + tip + "," + (unit / 1.12) + ")");
                                                    Statement st2 = model.coneccion.createStatement();
                                                    if (tipo.getSelectedItem().toString().equalsIgnoreCase("transporte")) {
                                                      
                                                        st2.executeUpdate("INSERT INTO producto(idproducto,nombre,punit,nivel_precio,stock_minimo,stock_maximo,stock_actual,descuento,codigo_barra,tipo_producto_idtipo_producto,precio_sin_iva) VALUES (" + id + ",'" + descr + "'," + unit + ",1," + min + "," + max + "," + a + ",0,'" + codigo + "'," + tip + "," + (unit) + ")");

                                                    } else {

                                                        st2.executeUpdate("INSERT INTO producto(idproducto,nombre,punit,nivel_precio,stock_minimo,stock_maximo,stock_actual,descuento,codigo_barra,tipo_producto_idtipo_producto,precio_sin_iva) VALUES (" + id + ",'" + descr + "'," + unit + ",1," + min + "," + max + "," + a + ",0,'" + codigo + "'," + tip + "," + (unit / 1.12) + ")");

                                                    }
                                                    //  System.out.println("INSERT INTO `adv_facturacion`.`cliente` (`nombre`, `direccion`, `cedula_ruc`, `telefono`, `credito_cliente`,`placa` ,`estado`, `email`, `tipo_identificacion`, `cupo_cliente`) VALUES ('" + ncliente.getText().toUpperCase() + "', '" + dcliente.getText() + "', '" + ruccliente.getText() + "', '" + tcliente.getText() + "', '0','" + placa.getText() + "', 'No Autorizado', '" + email.getText() + "'," + ti+ ", '0.00');");


                                                    JOptionPane.showMessageDialog(this, "articulo grabado correctamente");
                                                    desc.setText("");
                                                    unitario.setText("");
                                                    Smax.setText("");
                                                    Smin.setText("");
                                                    Sact.setText("");
                                                    cod.setEnabled(true);
                                                    cod.setText("");
                                                    cod.setEditable(true);
                                                    model.desconectar();
                                                    tipo.setSelectedIndex(0);
                                                } catch (SQLException ex) {

                                                    JOptionPane.showMessageDialog(this, "el codigo del articulo ya existe");
                                                }
                                            } else {
                                                JOptionPane.showMessageDialog(this, "Debe Seleccionar el Tipo");
                                            }

                                        } catch (ClassNotFoundException ex) {
                                            Logger.getLogger(agregarArticulo.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(this, "el actual no puede ser mayor al stock maximo");

                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "el minimo es mayor al maximo");
                                }
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(this, "el stock actual debe ser un entero");
                                ex.printStackTrace();
                            }//quinto
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(this, "el stock minimo debe ser un entero");

                        }//cuarto
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "el stock maximo debe ser un entero");

                    }//tercer try
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "el precio es incorrecto debe ser de formato 0.00");

                }//segundo try
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "el codigo debe ser un entero");

            }//primer try


        } else {
            JOptionPane.showMessageDialog(this, "debe ingresar la descripcion");
        }

    }//GEN-LAST:event_agregarActionPerformed

    private void descActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descActionPerformed
        unitario.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_descActionPerformed

    private void unitarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitarioActionPerformed
        Smax.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_unitarioActionPerformed

    private void SmaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmaxActionPerformed
        Smin.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_SmaxActionPerformed

    private void SminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SminActionPerformed
        Sact.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_SminActionPerformed

    private void SactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SactActionPerformed
        agregar.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_SactActionPerformed

    private void tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoActionPerformed
        if (!tipo.getSelectedItem().toString().equalsIgnoreCase("seleccione el tipo")) {


            try {
                model2 = new ConnectionTableDB(usu, contra, "adv_facturacion", "select idtipo_producto from tipo_producto where tipo_producto ='" + tipo.getSelectedItem().toString() + "'", false);
                // TODO add your handling code here:
                int id = Integer.parseInt(String.valueOf(model2.getValueAt(0, 0)));
                if (id != 2 || tipo.getSelectedIndex() == 0) {
                    Smax.setEnabled(false);
                    Smin.setEnabled(false);
                    Sact.setEnabled(false);
                    Smax.setText("1");
                    Smin.setText("0");
                    Sact.setText("0");

                } else {
                    Smax.setEnabled(true);
                    Smin.setEnabled(true);
                    Sact.setEnabled(true);
                    Smax.setText("");
                    Smin.setText("");
                    Sact.setText("");
                }
                model2.desconectar();

            } catch (SQLException ex) {
                Logger.getLogger(agregarArticulo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tipoActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Sact;
    private javax.swing.JTextField Smax;
    private javax.swing.JTextField Smin;
    private javax.swing.JButton agregar;
    private javax.swing.JTextField cod;
    private javax.swing.JTextField desc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JComboBox tipo;
    private javax.swing.JTextField unitario;
    // End of variables declaration//GEN-END:variables
}
