/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;

import conexion.ConnectionTableDB;
import conexion.conexion_facturacion;
import java.awt.Font;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.Blob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import reportes.estados_cuenta;

/**
 *
 * @author r
 */
public class modificar_pagare extends javax.swing.JFrame {

    /**
     * Creates new form crear_pagare
     */
    public DefaultListModel modelo = new DefaultListModel();
    MiModelo litabla = new MiModelo();
    String usuario, contraseña;
    conexion_facturacion n;
    Object datos[] = new Object[5];
    private TableRowSorter<TableModel> sorter;

    public void LimpiarJTable() {

        litabla.setNumRows(0);


    }

    public modificar_pagare(String usuario, String contraseña) {
        try {
            initComponents();
            this.usuario = usuario;
            this.contraseña = contraseña;

            jButton1.setEnabled(false);
            litabla.addColumn("Nº");
            litabla.addColumn("Nombre");
            litabla.addColumn("Cedula/ruc");
            litabla.addColumn("Credito");
            litabla.addColumn("Cupo");
            n = new conexion_facturacion(usuario, contraseña);
            n.conectar();



        } catch (ClassNotFoundException ex) {
            Logger.getLogger(modificar_pagare.class.getName()).log(Level.SEVERE, null, ex);
        }




    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clientes = new javax.swing.JFrame();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientest = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        rbuscar = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        ruc = new javax.swing.JTextField();
        nombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        galones = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        hora = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        placa = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        npagare = new javax.swing.JTextField();
        fecha = new javax.swing.JTextField();
        manguera = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        estado = new javax.swing.JComboBox();

        clientes.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        clientes.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        clientest.setAutoCreateRowSorter(true);
        clientest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        clientest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientestMouseClicked(evt);
            }
        });
        clientest.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clientestKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(clientest);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("CEDULA/RUC");

        rbuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rbuscarKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rbuscarKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        clientes.getContentPane().add(jPanel4);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("Buscar Cliente");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ruc.setEditable(false);
        ruc.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        nombre.setEditable(false);
        nombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("MANGUERA");

        galones.setEditable(false);
        galones.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        galones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                galonesActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("GALONES");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("TOTAL");

        total.setEditable(false);
        total.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("FECHA");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("HORA");

        hora.setEditable(false);
        hora.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jButton2.setText("Modificar Pagare");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("PLACA");

        placa.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Numero de Pagare");

        npagare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                npagareActionPerformed(evt);
            }
        });

        fecha.setEditable(false);
        fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaActionPerformed(evt);
            }
        });

        manguera.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("ESTADO");

        estado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FACTURADO", "NO FACTURADO", "ANULADO" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(npagare, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ruc)
                                .addComponent(nombre)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(galones, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                                .addComponent(manguera)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(55, 55, 55)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(hora)
                                                .addComponent(total)
                                                .addComponent(fecha)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(placa, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(0, 0, Short.MAX_VALUE))
                                                .addComponent(estado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jButton2)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(npagare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ruc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(manguera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(galones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(hora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(placa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(estado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jButton2))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class MiModelo extends DefaultTableModel {

        @Override
        public boolean isCellEditable(int row, int column) {

            return false;

        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            n.conectar();



            LimpiarJTable();
            int id = 0, telefono = 0;
            String nombrec = null, mail = null, cedula;



            Statement st_im1 = n.coneccion.createStatement();
            ResultSet ridim1 = st_im1.executeQuery("SELECT\n"
                    + "     cliente.`idcliente` AS cliente_idcliente,\n"
                    + "     cliente.`nombre` AS cliente_nombre,\n"
                    + "     cliente.`cedula_ruc` AS cliente_cedula_ruc,\n"
                    + "     cliente.`credito_cliente` AS cliente_credito_cliente,\n"
                    + "     credito_cliente.`cupo_cliente` AS credito_cliente_cupo_cliente\n"
                    + "FROM\n"
                    + "     `cliente` cliente INNER JOIN `credito_cliente` credito_cliente ON cliente.`idcliente` = credito_cliente.`cliente_idcliente`");





            while (ridim1.next()) {



                for (int i = 0; i < 5; i++) {
                    datos[i] = ridim1.getObject(i + 1);

                    //datos[i] = consultac.getObject(i + 1);
                }
                litabla.addRow(datos);
            }
            clientest.setModel(litabla);
            sorter = new TableRowSorter<TableModel>(litabla);

            st_im1.close();
            ridim1.close();

            n.coneccion.close();
            clientes.setVisible(true);
            clientes.setBounds(0, 0, 500, 500);
        } catch (SQLException ex) {
            Logger.getLogger(modificar_pagare.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(modificar_pagare.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    String cadena = "";
    int columna;
    private void clientestKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientestKeyPressed
    }//GEN-LAST:event_clientestKeyPressed

    private void rbuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbuscarKeyPressed
    }//GEN-LAST:event_rbuscarKeyPressed
    String idc;
    private void clientestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientestMouseClicked
        String cedula = "";
        String nombrec = "";
        String direccion = "";

        try {

            DefaultTableModel tm = (DefaultTableModel) clientest.getModel();
            cedula = String.valueOf(tm.getValueAt(clientest.getSelectedRow(), 2));
            nombrec = String.valueOf(tm.getValueAt(clientest.getSelectedRow(), 1));
            direccion = String.valueOf(tm.getValueAt(clientest.getSelectedRow(), 4));

            idc = String.valueOf(tm.getValueAt(clientest.getSelectedRow(), 0));


            nombre.setText(nombrec);
            ruc.setText(cedula);


            clientes.dispose();






        } catch (java.lang.NumberFormatException ex) {
        }
    }//GEN-LAST:event_clientestMouseClicked

    private void rbuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbuscarKeyTyped
        try {
            n.conectar();



            LimpiarJTable();
            int id = 0, telefono = 0;
            String nombrec = null, mail = null, cedula;



            Statement st_im1 = n.coneccion.createStatement();
            ResultSet ridim1 = st_im1.executeQuery("SELECT\n"
                    + "     cliente.`idcliente` AS cliente_idcliente,\n"
                    + "     cliente.`nombre` AS cliente_nombre,\n"
                    + "     cliente.`cedula_ruc` AS cliente_cedula_ruc,\n"
                    + "     cliente.`credito_cliente` AS cliente_credito_cliente,\n"
                    + "     credito_cliente.`cupo_cliente` AS credito_cliente_cupo_cliente\n"
                    + "FROM\n"
                    + "     `cliente` cliente INNER JOIN `credito_cliente` credito_cliente ON cliente.`idcliente` = credito_cliente.`cliente_idcliente` "
                    + "where cedula_ruc='" + rbuscar.getText() + "'");





            while (ridim1.next()) {



                for (int i = 0; i < 5; i++) {
                    datos[i] = ridim1.getObject(i + 1);

                    //datos[i] = consultac.getObject(i + 1);
                }
                litabla.addRow(datos);
            }
            clientest.setModel(litabla);
            sorter = new TableRowSorter<TableModel>(litabla);

            st_im1.close();
            ridim1.close();

            n.coneccion.close();

        } catch (SQLException ex) {
            Logger.getLogger(modificar_pagare.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(modificar_pagare.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rbuscarKeyTyped
    String producto;
    private void galonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_galonesActionPerformed
    }//GEN-LAST:event_galonesActionPerformed
    String rz = "", np = "", d = "", r = "", na = "", clientr = "", tcliente = "";

    private void Dibuja_Linea(PrintWriter ps) {
        try {
            ps.println("---------------------------------");
        } catch (Exception e) {
            System.out.print(e);
        }
    }
    String fe;
    int idpagare;
     int estadop;
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
           
            
             switch (estado.getSelectedItem().toString()) {
                     case "FACTURADO":
                       
                        
                        break;
                    case "NO FACTURADO":
                       
                        estadop=0;
                        break;
                    case "ANULADO":
                          estadop=2;
                        break;
                }
            
            
            
            n.conectar();
            Statement st_in = n.coneccion.createStatement();
            ResultSet ri = st_in.executeQuery("SELECT iddatos_gasolinera,razon_social,ruc,direccion,email_estacion,secuencia1_factura,s2,despachadores_turno,tipo_ambiente,obligado_llevar_contabilidad,nombre_comercial,contribuyente_especial,certificado_digital,contraseña_certificado,tipo_cierre_turnos,contraseña_mail,AES_DECRYPT(contraseña_certificado,'thekey'),AES_DECRYPT(contraseña_mail,'thekey'),mantenimiento FROM adv_facturacion.datos_gasolinera , adv_facturacion.punto_emision where datos_gasolinera_iddatos_gasolinera=iddatos_gasolinera and idpunto_emision=1;");

            while (ri.next()) {

                rz = ri.getString(2);
                np = ri.getString(5);
                d = ri.getString(4);
                r = ri.getString(3);


            }









            String impresora = "";
            Font fuente;
            FileWriter file = null;
            file = new FileWriter("ticket" + manguera.getText() + ".txt");

            BufferedWriter buffer = new BufferedWriter(file);
            PrintWriter ps = new PrintWriter(buffer);




            char[] ESC_CUT_PAPER = new char[]{0x1B, '!', (char) 0};
            ps.write(ESC_CUT_PAPER);



            ESC_CUT_PAPER = new char[]{0x1B, '!', (char) 24};
            ps.write(ESC_CUT_PAPER);

            ps.println(rz.replace("ñ", "n"));

            ESC_CUT_PAPER = new char[]{0x1B, '!', (char) 1};
            ps.write(ESC_CUT_PAPER);
            ps.println("Pagare Numero:" + npagare.getText());
            ps.println("FECHA: " + fecha.getText());
            ps.println("HORA: " + hora.getText());
            ps.println("RUC/CED:");
            ps.println(ruc.getText());
            ps.println("MANGUERA: " + manguera.getText());
            ps.println("CANTIDAD: " + galones.getText());
            ps.println("PRODUCTO:  " + producto);
            ps.println("VALOR TOTAL: " + total.getText() + " DOLARES");
            Dibuja_Linea(ps);
            ps.println("YO: ");
            ps.println(nombre.getText());
            ps.println("DEBO Y PAGARE  ");
            ps.println("en esta ciudad a la orden de:");
            ps.println(rz);
            ps.println("la cantidad de");
            ps.println(total.getText() + " Dolares Americanos");
            ps.println("Por concepto de Venta de ");
            ps.println("Combustible:" + producto);
            ps.println("Me someto a los jueces o");
            ps.println("tribunales competentes de la ciudad ");
            ps.println("y renuncio a fuero y domicilio");
            ps.println("y a la via ejecutiva o verbal");
            ps.println("sumaria a eleccion de");
            ps.println(rz);
            ps.println("                      ");
            ps.println("                      ");
            ps.println("----------------------");
            ps.println("Firma Cliente");
            ps.println("                      ");
            ps.println("----------------------");
            ps.println("Cedula Cliente");
            ps.println("Placa Vehiculo " + placa.getText());
            ps.println("                       ");
            ps.close();


            if (idc == null) {


                Statement st_f = n.coneccion.createStatement();
                ResultSet rif = st_f.executeQuery("select idcliente from cliente where cedula_ruc='" + ruc.getText() + "'");


                while (rif.next()) {

                    idc = rif.getString(1);


                }

            }



            FileInputStream inputStream1 = new FileInputStream("ticket" + manguera.getText() + ".txt");
            Statement st_f = n.coneccion.createStatement();
            ResultSet rif = st_f.executeQuery("select idusuarios from usuarios where usuario='" + usuario + "'");


            while (rif.next()) {




                Double monto = Math.rint(Double.parseDouble(total.getText().replace(",", ".")) * 100) / 100;

                Double subtotal = monto / 1.12;

                Double iva = monto - subtotal;


                PreparedStatement myStatement = n.coneccion.prepareStatement("UPDATE `adv_facturacion`.`pagare` SET `pagare`=?, `cliente_idcliente`='" + idc + "',placa='" + placa.getText() + "' ,facturado='" + estadop + "' WHERE `idpagare`='" + npagare.getText() + "' ;");


                myStatement.setBinaryStream(1, inputStream1, inputStream1.available());
                myStatement.executeUpdate();


                JOptionPane.showMessageDialog(this, "PAGARE Numero " + npagare.getText() + " modificado correctamente ");
            }

            n.coneccion.close();
            this.dispose();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(modificar_pagare.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(modificar_pagare.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(modificar_pagare.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void npagareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_npagareActionPerformed
        try {
            Statement st_im1 = n.coneccion.createStatement();
            ResultSet ridim1 = st_im1.executeQuery("SELECT configuracion_nmanguera,total,cantidad,fecha,hora,pagare.placa,nombre,cedula_ruc,producto_idproducto,CASE facturado  \n" +
"WHEN '1' THEN 'FACTURADO'\n" +
"WHEN '0' THEN 'NO FACTURADO' WHEN '2' THEN 'ANULADO'  END as facturado FROM adv_facturacion.pagare,adv_facturacion.cliente,adv_facturacion.configuracion where configuracion_nmanguera=nmanguera and pagare.cliente_idcliente=idcliente and  idpagare='" + npagare.getText() + "' ");

            if (ridim1.first()) {



                manguera.setText(ridim1.getString(1));
                total.setText(ridim1.getString(2));
                galones.setText(ridim1.getString(3));
                fecha.setText(ridim1.getString(4));
                hora.setText(ridim1.getString(5));
                placa.setText(ridim1.getString(6));
                nombre.setText(ridim1.getString(7));
                ruc.setText(ridim1.getString(8));
                
               
                
                System.out.println(ridim1.getString(10));
                
                estado.setSelectedItem(ridim1.getString(10));
                
                
                
                
                if(ridim1.getString(10).equalsIgnoreCase("FACTURADO")){
                
                    jButton1.setEnabled(false);
                     
                
                }
                
                
                
                switch (ridim1.getString(10)) {
                    case "FACTURADO":
                        estadop=1;
                        
                        break;
                    case "NO FACTURADO":
                       
                        estadop=0;
                        break;
                    case "ANULADO":
                          estadop=2;
                        break;
                }
                
                switch (ridim1.getInt(9)) {
                    case 1:
                        producto = "Extra";
                        break;
                    case 2:
                        producto = "Super";
                        break;
                    case 3:
                        producto = "Diesel";
                        break;
                }


                npagare.setEditable(false);
                jButton1.setEnabled(true);


            } else {


                JOptionPane.showMessageDialog(null, "El numero de pagare ingresado no existe o ya esta facturado");


            }
        } catch (SQLException ex) {
            Logger.getLogger(modificar_pagare.class.getName()).log(Level.SEVERE, null, ex);
        }



    }//GEN-LAST:event_npagareActionPerformed

    private void fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(modificar_pagare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(modificar_pagare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(modificar_pagare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(modificar_pagare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new modificar_pagare("root", "manager").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame clientes;
    private javax.swing.JTable clientest;
    private javax.swing.JComboBox estado;
    private javax.swing.JTextField fecha;
    private javax.swing.JTextField galones;
    private javax.swing.JTextField hora;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField manguera;
    private javax.swing.JTextField nombre;
    private javax.swing.JTextField npagare;
    private javax.swing.JTextField placa;
    private javax.swing.JTextField rbuscar;
    private javax.swing.JTextField ruc;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
}
